{"ast":null,"code":"var _jsxFileName = \"/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport { fetchPages, fetchPageAnswers, savePageAnswers, calculatePageProgress, evaluateCondition } from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'user_123';\nexport default function QuestionnairePageFlow() {\n  _s();\n  const {\n    cluster\n  } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([fetchPages(cluster), fetchPageAnswers(cluster)]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    return Math.max(0, pages.length - 1);\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Determina completamento globale\n    const allComplete = pages.every(p => {\n      const req = (p.questions || []).filter(q => q.required);\n      const saved = pageAnswers[p.id] || {};\n      return req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n    });\n    setCompleted(allComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n  const handleSubmitPage = async answers => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({\n        ...prev,\n        [page.id]: answers\n      }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Routing condizionale data-driven\n      const routing = page.conditionalRouting;\n      if (routing) {\n        // Flatten risposte correnti per condizione: tutte pageAnswers + questa pagina\n        const flat = {\n          ...Object.values({\n            ...pageAnswers,\n            [page.id]: answers\n          }).reduce((acc, pa) => {\n            Object.entries(pa || {}).forEach(([k, v]) => acc[k] = v);\n            return acc;\n          }, {})\n        };\n        // Ordina regole per priority\n        const ordered = [...(routing.rules || [])].sort((a, b) => {\n          var _a$priority, _b$priority;\n          return ((_a$priority = a.priority) !== null && _a$priority !== void 0 ? _a$priority : 0) - ((_b$priority = b.priority) !== null && _b$priority !== void 0 ? _b$priority : 0);\n        });\n        const matched = ordered.find(r => evaluateCondition(r.condition, flat));\n        let targetId = null;\n        if (matched) targetId = matched.nextPage;else if (routing.defaultAction === 'complete') targetId = null;else targetId = routing.defaultAction;\n        if (!targetId) {\n          setCompleted(true);\n        } else {\n          const idx = pages.findIndex(p => p.id === targetId);\n          if (idx >= 0) setCurrentIndex(idx);else setCompleted(true);\n        }\n      } else {\n        // fallback sequenziale o flag isLast\n        if (page.isLast || page.nextPage === null) {\n          setCompleted(true);\n        } else if (page.nextPage) {\n          const idx = pages.findIndex(p => p.id === page.nextPage);\n          if (idx >= 0) setCurrentIndex(idx);else setCompleted(true);\n        } else {\n          setCurrentIndex(i => Math.min(i + 1, pages.length - 1));\n        }\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleBack = () => {\n    if (currentIndex === 0) {\n      navigate('/');\n      return;\n    }\n    setCurrentIndex(i => Math.max(0, i - 1));\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Caricamento...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Errore: \", error, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 21\n  }, this);\n  if (!pages.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Nessuna pagina disponibile \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 61\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 29\n  }, this);\n  if (completed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completed-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        value: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Questionario completato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: () => navigate('/'),\n        children: \"Torna all'elenco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-flow\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      value: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageView, {\n      page: page,\n      initialAnswers: initialAnswers,\n      onSubmit: handleSubmitPage,\n      loadingNext: saving\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-row\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: handleBack,\n        children: \"\\u2190 Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePageFlow, \"jIgpevG9YPGF5tppb6WUrDo7NVo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuestionnairePageFlow;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePageFlow\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","useNavigate","ProgressBar","PageView","fetchPages","fetchPageAnswers","savePageAnswers","calculatePageProgress","evaluateCondition","jsxDEV","_jsxDEV","USER_ID","QuestionnairePageFlow","_s","cluster","navigate","pages","setPages","pageAnswers","setPageAnswers","currentIndex","setCurrentIndex","loading","setLoading","saving","setSaving","error","setError","completed","setCompleted","progress","setProgress","active","pagesResp","answersResp","Promise","all","e","message","recomputeCurrentIndex","length","i","page","req","questions","filter","q","required","saved","id","done","every","undefined","Math","max","pct","allComplete","p","handleSubmitPage","answers","prev","window","dispatchEvent","CustomEvent","routing","conditionalRouting","flat","Object","values","reduce","acc","pa","entries","forEach","k","v","ordered","rules","sort","a","b","_a$priority","_b$priority","priority","matched","find","r","condition","targetId","nextPage","defaultAction","idx","findIndex","isLast","min","console","handleBack","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","value","initialAnswers","onSubmit","loadingNext","_c","$RefreshReg$"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport {\n  fetchPages,\n  fetchPageAnswers,\n  savePageAnswers,\n  calculatePageProgress,\n  evaluateCondition,\n} from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\nconst USER_ID = 'user_123';\n\nexport default function QuestionnairePageFlow() {\n  const { cluster } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true); setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([\n          fetchPages(cluster),\n          fetchPageAnswers(cluster)\n        ]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => { active = false; };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    return Math.max(0, pages.length - 1);\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Determina completamento globale\n    const allComplete = pages.every(p => {\n      const req = (p.questions || []).filter(q => q.required);\n      const saved = pageAnswers[p.id] || {};\n      return req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n    });\n    setCompleted(allComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n\n  const handleSubmitPage = async (answers) => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({ ...prev, [page.id]: answers }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Routing condizionale data-driven\n      const routing = page.conditionalRouting;\n      if (routing) {\n        // Flatten risposte correnti per condizione: tutte pageAnswers + questa pagina\n        const flat = { ...Object.values({ ...pageAnswers, [page.id]: answers }).reduce((acc, pa) => { Object.entries(pa || {}).forEach(([k,v]) => acc[k]=v); return acc; }, {}) };\n        // Ordina regole per priority\n        const ordered = [...(routing.rules || [])].sort((a,b) => (a.priority ?? 0) - (b.priority ?? 0));\n        const matched = ordered.find(r => evaluateCondition(r.condition, flat));\n        let targetId = null;\n        if (matched) targetId = matched.nextPage; else if (routing.defaultAction === 'complete') targetId = null; else targetId = routing.defaultAction;\n        if (!targetId) {\n          setCompleted(true);\n        } else {\n          const idx = pages.findIndex(p => p.id === targetId);\n            if (idx >= 0) setCurrentIndex(idx); else setCompleted(true);\n        }\n      } else {\n        // fallback sequenziale o flag isLast\n        if (page.isLast || page.nextPage === null) {\n          setCompleted(true);\n        } else if (page.nextPage) {\n          const idx = pages.findIndex(p => p.id === page.nextPage);\n          if (idx >= 0) setCurrentIndex(idx); else setCompleted(true);\n        } else {\n          setCurrentIndex(i => Math.min(i + 1, pages.length - 1));\n        }\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentIndex === 0) {\n      navigate('/');\n      return;\n    }\n    setCurrentIndex(i => Math.max(0, i - 1));\n  };\n\n  if (loading) return <div>Caricamento...</div>;\n  if (error) return <div>Errore: {error} <button onClick={() => navigate('/')}>Indietro</button></div>;\n  if (!pages.length) return <div>Nessuna pagina disponibile <button onClick={() => navigate('/')}>Indietro</button></div>;\n\n  if (completed) {\n    return (\n      <div className=\"completed-wrap\">\n        <ProgressBar value={100} />\n        <h2>Questionario completato</h2>\n        <button className=\"btn-back\" onClick={() => navigate('/')}>Torna all'elenco</button>\n      </div>\n    );\n  }\n\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n\n  return (\n    <div className=\"page-flow\">\n      <ProgressBar value={progress} />\n      <PageView\n        page={page}\n        initialAnswers={initialAnswers}\n        onSubmit={handleSubmitPage}\n        loadingNext={saving}\n      />\n      <div className=\"nav-row\">\n        <button className=\"btn-back\" onClick={handleBack}>← Indietro</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnaireLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport './QuestionnaireLoader.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'user_123';\nfunction getNextId(q, ansVal) {\n  var _ref, _q$next$ansVal;\n  if (!q || !q.next) return null;\n  if (typeof q.next === 'string') return q.next;\n  if (typeof q.next === 'object') return (_ref = (_q$next$ansVal = q.next[ansVal]) !== null && _q$next$ansVal !== void 0 ? _q$next$ansVal : q.next.default) !== null && _ref !== void 0 ? _ref : null;\n  return null;\n}\nfunction buildFullPath(questions, answers) {\n  var _questions$;\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions === null || questions === void 0 ? void 0 : (_questions$ = questions[0]) === null || _questions$ === void 0 ? void 0 : _questions$.id;\n  if (!startId) return {\n    path: [],\n    endReached: false\n  };\n  if (Object.keys(answers).length === 0) return {\n    path: [startId],\n    endReached: false\n  };\n  const path = [];\n  let currentId = startId;\n  let endReached = false;\n  const visited = new Set();\n  let safety = 0;\n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    var _ref2, _q$next$ans;\n    path.push(currentId);\n    visited.add(currentId);\n    const q = map.get(currentId);\n    if (!(q !== null && q !== void 0 && q.next)) {\n      endReached = true;\n      break;\n    }\n    const ans = answers[currentId];\n    if (ans === undefined) break;\n    let nextId = null;\n    if (typeof q.next === 'string') nextId = q.next;else if (typeof q.next === 'object') nextId = (_ref2 = (_q$next$ans = q.next[ans]) !== null && _q$next$ans !== void 0 ? _q$next$ans : q.next.default) !== null && _ref2 !== void 0 ? _ref2 : null;\n    if (!nextId || !map.has(nextId)) {\n      endReached = true;\n      break;\n    }\n    currentId = nextId;\n  }\n  return {\n    path,\n    endReached\n  };\n}\nfunction computeProgress(questions, answers, stack, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n  const totalQuestions = questions.length;\n  const answeredCount = Object.keys(answers).filter(id => questions.some(q => q.id === id)).length;\n  const percentage = Math.round(answeredCount / totalQuestions * 100);\n  return completed ? 100 : Math.min(percentage, 99);\n}\nconst QuestionnaireLoader = ({\n  onProgressChange\n}) => {\n  _s();\n  const {\n    cluster\n  } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [stack, setStack] = useState([]);\n  const [currentId, setCurrentId] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    if (!cluster) {\n      setLoading(false);\n      navigate('/');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    Promise.all([fetch(`/api/questionnaire/${cluster}`), fetch(`/api/userAnswers/${USER_ID}/${cluster}`)]).then(async ([qsRes, ansRes]) => {\n      var _qs$;\n      if (!qsRes.ok) throw new Error('Questionario non disponibile');\n      if (!ansRes.ok) throw new Error('Risposte non disponibili');\n      const qs = await qsRes.json();\n      // Se il questionario Ã¨ vuoto, potrebbe essere un cluster a Pagine -> redirect\n      if (!Array.isArray(qs) || qs.length === 0) {\n        try {\n          const pagesResp = await fetch(`/api/pages/${cluster}`);\n          if (pagesResp.ok) {\n            const pagesData = await pagesResp.json();\n            if (Array.isArray(pagesData.pages) && pagesData.pages.length > 0) {\n              navigate(`/questionario-pagine/${cluster}`, {\n                replace: true\n              });\n              return;\n            }\n          }\n        } catch (_) {/* ignora e prosegue mostrando messaggio vuoto */}\n      }\n      const userData = await ansRes.json();\n      const a = (userData === null || userData === void 0 ? void 0 : userData.answers) || {};\n      setQuestions(Array.isArray(qs) ? qs : []);\n      setAnswers(a);\n      const {\n        path,\n        endReached\n      } = buildFullPath(qs || [], a);\n      const pathNonVuoto = path.length > 0 ? path : qs !== null && qs !== void 0 && (_qs$ = qs[0]) !== null && _qs$ !== void 0 && _qs$.id ? [qs[0].id] : [];\n      setStack(pathNonVuoto);\n      setCurrentId(pathNonVuoto[pathNonVuoto.length - 1] || null);\n      const allAnsweredOnPath = path.every(id => a[id] !== undefined);\n      setCompleted(endReached && allAnsweredOnPath);\n      setLoading(false);\n    }).catch(e => {\n      setError('Errore di caricamento');\n      setLoading(false);\n    });\n  }, [cluster, navigate]);\n  const saveAnswers = newAnswers => {\n    fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        answers: newAnswers\n      })\n    }).then(() => {\n      onProgressChange && onProgressChange();\n    }).catch(() => {});\n  };\n  const handleAnswer = (questionId, answerValue) => {\n    const idxInStack = stack.indexOf(questionId);\n    let trimmedAnswers = {\n      ...answers\n    };\n    if (idxInStack !== -1 && idxInStack < stack.length - 1) {\n      const toRemove = stack.slice(idxInStack + 1);\n      toRemove.forEach(id => {\n        delete trimmedAnswers[id];\n      });\n    }\n    trimmedAnswers[questionId] = answerValue;\n    setAnswers(trimmedAnswers);\n    const q = questions.find(qq => qq.id === questionId);\n    const nextId = getNextId(q, answerValue);\n    if (nextId && questions.some(qq => qq.id === nextId)) {\n      const newStack = [...stack.slice(0, idxInStack + 1), nextId];\n      setStack(newStack);\n      setCurrentId(nextId);\n      setCompleted(false);\n    } else {\n      setStack(stack.slice(0, idxInStack + 1));\n      setCompleted(true);\n    }\n    saveAnswers(trimmedAnswers);\n  };\n  const handleBack = () => {\n    if (!stack.length || stack.length === 1) {\n      navigate('/');\n      return;\n    }\n    const newStack = stack.slice(0, -1);\n    const previousQuestionId = newStack[newStack.length - 1];\n    const updatedAnswers = {\n      ...answers\n    };\n    if (previousQuestionId && updatedAnswers[previousQuestionId] !== undefined) {\n      delete updatedAnswers[previousQuestionId];\n      setAnswers(updatedAnswers);\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          answers: updatedAnswers\n        })\n      }).then(() => {\n        window.dispatchEvent(new CustomEvent('progressChanged'));\n      }).catch(() => {});\n    }\n    setStack(newStack);\n    setCurrentId(previousQuestionId || null);\n    setCompleted(false);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Caricamento...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: () => navigate('/'),\n      children: \"Torna all\\u2019elenco\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 40\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 21\n  }, this);\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nessuna domanda disponibile per questo cluster. Potrebbe usare il flusso a pagine.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: () => navigate(`/questionario-pagine/${cluster}`),\n      children: \"Vai al flusso a pagine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 127\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: () => navigate('/'),\n      children: \"Torna all\\u2019elenco\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 248\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 33\n  }, this);\n  const progress = computeProgress(questions, answers, stack, completed);\n  if (completed) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"completed-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-outer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 119\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 83\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: \"100% completato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 163\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Questionario completato\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 221\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: () => navigate('/'),\n      children: \"Torna all'elenco\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 253\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 25\n  }, this);\n  const currentQuestion = questions.find(q => q.id === currentId) || questions[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"q-flow-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"q-flow-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-outer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-inner\",\n            style: {\n              width: `${progress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 71\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-text\",\n          children: [progress, \"% completato\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 149\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), currentQuestion && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Question, {\n          question: currentQuestion,\n          onAnswer: val => handleAnswer(currentQuestion.id, val)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-row\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-back\",\n            onClick: handleBack,\n            children: \"\\u2190 Indietro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireLoader, \"pcT1gp6/7nQ6jrTmEoGnHCOWm/k=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuestionnaireLoader;\nexport default QuestionnaireLoader;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireLoader\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Question","jsxDEV","_jsxDEV","Fragment","_Fragment","USER_ID","getNextId","q","ansVal","_ref","_q$next$ansVal","next","default","buildFullPath","questions","answers","_questions$","map","Map","id","startId","path","endReached","Object","keys","length","currentId","visited","Set","safety","has","_ref2","_q$next$ans","push","add","get","ans","undefined","nextId","computeProgress","stack","completed","Array","isArray","totalQuestions","answeredCount","filter","some","percentage","Math","round","min","QuestionnaireLoader","onProgressChange","_s","cluster","navigate","setQuestions","setAnswers","setStack","setCurrentId","setCompleted","loading","setLoading","error","setError","Promise","all","fetch","then","qsRes","ansRes","_qs$","ok","Error","qs","json","pagesResp","pagesData","pages","replace","_","userData","a","pathNonVuoto","allAnsweredOnPath","every","catch","e","saveAnswers","newAnswers","method","headers","body","JSON","stringify","handleAnswer","questionId","answerValue","idxInStack","indexOf","trimmedAnswers","toRemove","slice","forEach","find","qq","newStack","handleBack","previousQuestionId","updatedAnswers","window","dispatchEvent","CustomEvent","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","progress","currentQuestion","style","width","question","onAnswer","val","_c","$RefreshReg$"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnaireLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport './QuestionnaireLoader.css';\n\nconst USER_ID = 'user_123';\n\nfunction getNextId(q, ansVal) {\n  if (!q || !q.next) return null;\n  if (typeof q.next === 'string') return q.next;\n  if (typeof q.next === 'object') return q.next[ansVal] ?? q.next.default ?? null;\n  return null;\n}\n\nfunction buildFullPath(questions, answers) {\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions?.[0]?.id;\n  if (!startId) return { path: [], endReached: false };\n  if (Object.keys(answers).length === 0) return { path: [startId], endReached: false };\n  const path = []; let currentId = startId; let endReached = false; const visited = new Set(); let safety = 0;\n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    path.push(currentId); visited.add(currentId); const q = map.get(currentId);\n    if (!q?.next) { endReached = true; break; }\n    const ans = answers[currentId]; if (ans === undefined) break;\n    let nextId = null;\n    if (typeof q.next === 'string') nextId = q.next; else if (typeof q.next === 'object') nextId = q.next[ans] ?? q.next.default ?? null;\n    if (!nextId || !map.has(nextId)) { endReached = true; break; }\n    currentId = nextId;\n  }\n  return { path, endReached };\n}\n\nfunction computeProgress(questions, answers, stack, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n  const totalQuestions = questions.length;\n  const answeredCount = Object.keys(answers).filter(id => questions.some(q => q.id === id)).length;\n  const percentage = Math.round((answeredCount / totalQuestions) * 100);\n  return completed ? 100 : Math.min(percentage, 99);\n}\n\nconst QuestionnaireLoader = ({ onProgressChange }) => {\n  const { cluster } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [stack, setStack] = useState([]);\n  const [currentId, setCurrentId] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!cluster) { setLoading(false); navigate('/'); return; }\n    setLoading(true); setError('');\n    Promise.all([\n      fetch(`/api/questionnaire/${cluster}`),\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`)\n    ])\n      .then(async ([qsRes, ansRes]) => {\n        if (!qsRes.ok) throw new Error('Questionario non disponibile');\n        if (!ansRes.ok) throw new Error('Risposte non disponibili');\n        const qs = await qsRes.json();\n        // Se il questionario Ã¨ vuoto, potrebbe essere un cluster a Pagine -> redirect\n        if (!Array.isArray(qs) || qs.length === 0) {\n          try {\n            const pagesResp = await fetch(`/api/pages/${cluster}`);\n            if (pagesResp.ok) {\n              const pagesData = await pagesResp.json();\n              if (Array.isArray(pagesData.pages) && pagesData.pages.length > 0) {\n                navigate(`/questionario-pagine/${cluster}`, { replace: true });\n                return;\n              }\n            }\n          } catch (_) { /* ignora e prosegue mostrando messaggio vuoto */ }\n        }\n\n        const userData = await ansRes.json();\n        const a = userData?.answers || {};\n        setQuestions(Array.isArray(qs) ? qs : []);\n        setAnswers(a);\n        const { path, endReached } = buildFullPath(qs || [], a);\n        const pathNonVuoto = path.length > 0 ? path : (qs?.[0]?.id ? [qs[0].id] : []);\n        setStack(pathNonVuoto);\n        setCurrentId(pathNonVuoto[pathNonVuoto.length - 1] || null);\n        const allAnsweredOnPath = path.every(id => a[id] !== undefined);\n        setCompleted(endReached && allAnsweredOnPath);\n        setLoading(false);\n      })\n      .catch((e) => { setError('Errore di caricamento'); setLoading(false); });\n  }, [cluster, navigate]);\n\n  const saveAnswers = (newAnswers) => {\n    fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n      method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ answers: newAnswers })\n    }).then(() => { onProgressChange && onProgressChange(); }).catch(() => {});\n  };\n\n  const handleAnswer = (questionId, answerValue) => {\n    const idxInStack = stack.indexOf(questionId);\n    let trimmedAnswers = { ...answers };\n    if (idxInStack !== -1 && idxInStack < stack.length - 1) {\n      const toRemove = stack.slice(idxInStack + 1); toRemove.forEach(id => { delete trimmedAnswers[id]; });\n    }\n    trimmedAnswers[questionId] = answerValue; setAnswers(trimmedAnswers);\n    const q = questions.find(qq => qq.id === questionId); const nextId = getNextId(q, answerValue);\n    if (nextId && questions.some(qq => qq.id === nextId)) {\n      const newStack = [...stack.slice(0, idxInStack + 1), nextId]; setStack(newStack); setCurrentId(nextId); setCompleted(false);\n    } else { setStack(stack.slice(0, idxInStack + 1)); setCompleted(true); }\n    saveAnswers(trimmedAnswers);\n  };\n\n  const handleBack = () => {\n    if (!stack.length || stack.length === 1) { navigate('/'); return; }\n    const newStack = stack.slice(0, -1); const previousQuestionId = newStack[newStack.length - 1];\n    const updatedAnswers = { ...answers };\n    if (previousQuestionId && updatedAnswers[previousQuestionId] !== undefined) {\n      delete updatedAnswers[previousQuestionId]; setAnswers(updatedAnswers);\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ answers: updatedAnswers })\n      }).then(() => { window.dispatchEvent(new CustomEvent('progressChanged')); }).catch(() => {});\n    }\n    setStack(newStack); setCurrentId(previousQuestionId || null); setCompleted(false);\n  };\n\n  if (loading) return <div>Caricamento...</div>;\n  if (error) return <div><p>{error}</p><button className=\"btn-back\" onClick={() => navigate('/')}>Torna allâelenco</button></div>;\n  if (!questions.length) return <div><p>Nessuna domanda disponibile per questo cluster. Potrebbe usare il flusso a pagine.</p><button className=\"btn-back\" onClick={() => navigate(`/questionario-pagine/${cluster}`)}>Vai al flusso a pagine</button> <button className=\"btn-back\" onClick={() => navigate('/')}>Torna allâelenco</button></div>;\n  const progress = computeProgress(questions, answers, stack, completed);\n  if (completed) return <div className=\"completed-wrap\"><div className=\"progress\"><div className=\"progress-bar-outer\"><div className=\"progress-bar-inner\" /></div><div className=\"progress-text\">100% completato</div></div><h2>Questionario completato</h2><button className=\"btn-back\" onClick={() => navigate('/')}>Torna all'elenco</button></div>;\n  const currentQuestion = questions.find(q => q.id === currentId) || questions[0];\n  return (\n    <div>\n      <div className=\"q-flow-header\">\n        {/* Potenzialmente titolo/subtitolo cluster se disponibili in future props */}\n      </div>\n      <div className=\"q-flow-container\">\n        <div className=\"progress\"><div className=\"progress-bar-outer\"><div className=\"progress-bar-inner\" style={{ width: `${progress}%` }} /></div><div className=\"progress-text\">{progress}% completato</div></div>\n        {currentQuestion && (\n          <>\n            <Question question={currentQuestion} onAnswer={val => handleAnswer(currentQuestion.id, val)} />\n            <div className=\"nav-row\"><button className=\"btn-back\" onClick={handleBack}>â Indietro</button></div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionnaireLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// api.js - layer di servizio per il frontend React\n// Incapsula tutte le chiamate REST al backend\n\nconst USER_ID = 'user_123';\nconst base = ''; // proxy in package.json punta a http://localhost:3001\n\nasync function jsonFetch(url, options = {}) {\n  const resp = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    ...options\n  });\n  if (!resp.ok) {\n    let msg = `HTTP ${resp.status}`;\n    try {\n      const j = await resp.json();\n      msg = j.error || msg;\n    } catch {}\n    throw new Error(msg);\n  }\n  return resp.json();\n}\n\n// Lista progress questionari (clusters)\nexport async function fetchProgress() {\n  return jsonFetch(`/api/progress/${USER_ID}`);\n}\n\n// Domande formato classico\nexport async function fetchQuestionnaire(cluster) {\n  return jsonFetch(`/api/questionnaire/${cluster}`); // array\n}\n\n// Risposte formato classico\nexport async function fetchAnswers(cluster) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/${cluster}`);\n}\nexport async function saveAnswers(cluster, answers) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n    method: 'POST',\n    body: JSON.stringify({\n      answers\n    })\n  });\n}\nexport async function resetAnswers(cluster) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/reset/${cluster}`, {\n    method: 'POST'\n  });\n}\n\n// Pagine (nuovo formato)\nexport async function fetchPages(cluster) {\n  return jsonFetch(`/api/pages/${cluster}`); // { title, pages: [...] }\n}\nexport async function fetchPageAnswers(cluster) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}`); // { pageAnswers }\n}\nexport async function fetchSinglePage(pageId) {\n  return jsonFetch(`/api/pages/page/${pageId}`);\n}\nexport async function savePageAnswers(cluster, pageId, answers) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}/${pageId}`, {\n    method: 'POST',\n    body: JSON.stringify({\n      answers\n    })\n  });\n}\nexport async function resetPageAnswers(cluster) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}/reset`, {\n    method: 'POST'\n  });\n}\n\n// Utility progress locale per questionari classici\nexport function computeQuestionnaireProgress(questions, answers, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n  const total = questions.length;\n  const answered = Object.keys(answers || {}).filter(id => questions.some(q => q.id === id)).length;\n  const pct = Math.round(answered / total * 100);\n  return completed ? 100 : Math.min(pct, 99);\n}\n\n// Motore path (replica buildFullPath)\nexport function buildFullPath(questions, answers) {\n  var _questions$;\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions === null || questions === void 0 ? void 0 : (_questions$ = questions[0]) === null || _questions$ === void 0 ? void 0 : _questions$.id;\n  if (!startId) return {\n    path: [],\n    endReached: false\n  };\n  if (!answers || Object.keys(answers).length === 0) return {\n    path: [startId],\n    endReached: false\n  };\n  const path = [];\n  let currentId = startId;\n  let endReached = false;\n  const visited = new Set();\n  let safety = 0;\n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    var _ref, _q$next$ans;\n    path.push(currentId);\n    visited.add(currentId);\n    const q = map.get(currentId);\n    if (!(q !== null && q !== void 0 && q.next)) {\n      endReached = true;\n      break;\n    }\n    const ans = answers[currentId];\n    if (ans === undefined) break;\n    let nextId = null;\n    if (typeof q.next === 'string') nextId = q.next;else if (typeof q.next === 'object') nextId = (_ref = (_q$next$ans = q.next[ans]) !== null && _q$next$ans !== void 0 ? _q$next$ans : q.next.default) !== null && _ref !== void 0 ? _ref : null;\n    if (!nextId || !map.has(nextId)) {\n      endReached = true;\n      break;\n    }\n    currentId = nextId;\n  }\n  return {\n    path,\n    endReached\n  };\n}\n\n// Motore pagine (semplificato data-driven)\nexport function evaluateCondition(condition, flatAnswers) {\n  const userValue = flatAnswers[condition.questionId];\n  if (userValue === undefined) return false;\n  const userStr = String(userValue);\n  const expected = String(condition.value);\n  const op = condition.operatorType || condition.operator;\n  if (op === '==' || op === '!=') return op === '==' ? userStr === expected : userStr !== expected;\n  const uNum = Number(userStr);\n  const eNum = Number(expected);\n  if (Number.isNaN(uNum) || Number.isNaN(eNum)) return false;\n  switch (op) {\n    case '>':\n      return uNum > eNum;\n    case '>=':\n      return uNum >= eNum;\n    case '<':\n      return uNum < eNum;\n    case '<=':\n      return uNum <= eNum;\n    default:\n      return false;\n  }\n}\nexport function resolveRoutingTargets(routing, pages, flatAnswers) {\n  if (!routing) return [];\n  const rules = [...(routing.rules || [])].sort((a, b) => {\n    var _a$priority, _b$priority;\n    return ((_a$priority = a.priority) !== null && _a$priority !== void 0 ? _a$priority : 0) - ((_b$priority = b.priority) !== null && _b$priority !== void 0 ? _b$priority : 0);\n  });\n  const matchedPages = rules.filter(r => evaluateCondition(r.condition, flatAnswers)).map(r => r.nextPage);\n  const targets = new Set();\n  matchedPages.forEach(pid => targets.add(pid));\n  if (routing.defaultAction && routing.defaultAction !== 'complete') targets.add(routing.defaultAction);\n  return [...targets].map(id => pages.findIndex(p => p.id === id)).filter(i => i >= 0);\n}\nexport function computeReachablePageIndices(pages, flatAnswers) {\n  if (!Array.isArray(pages) || pages.length === 0) return new Set();\n  const visited = new Set();\n  const queue = [0];\n  while (queue.length) {\n    const idx = queue.shift();\n    if (idx < 0 || idx >= pages.length || visited.has(idx)) continue;\n    visited.add(idx);\n    const page = pages[idx];\n    if (page && page.conditionalRouting) {\n      const targets = resolveRoutingTargets(page.conditionalRouting, pages, flatAnswers);\n      targets.forEach(t => {\n        if (!visited.has(t)) queue.push(t);\n      });\n    } else {\n      const next = idx + 1;\n      if (next < pages.length) queue.push(next);\n    }\n  }\n  return visited;\n}\nexport function calculatePageProgress(pages, pageAnswers) {\n  if (!Array.isArray(pages) || pages.length === 0) return 0;\n  const flatAnswers = Object.values(pageAnswers || {}).reduce((acc, answersObj) => {\n    Object.entries(answersObj || {}).forEach(([qid, v]) => {\n      acc[qid] = v;\n    });\n    return acc;\n  }, {});\n  const reachable = computeReachablePageIndices(pages, flatAnswers);\n  if (reachable.size === 0) return 0;\n  let totalRequired = 0;\n  let answeredRequired = 0;\n  for (const idx of reachable) {\n    const page = pages[idx];\n    if (!page) continue;\n    const reqQuestions = (page.questions || []).filter(q => q.required === true);\n    if (reqQuestions.length === 0) continue;\n    totalRequired += reqQuestions.length;\n    const saved = pageAnswers[page.id] || {};\n    answeredRequired += reqQuestions.filter(q => saved[q.id] !== undefined).length;\n  }\n  if (totalRequired === 0) return 0;\n  const pct = Math.round(answeredRequired / totalRequired * 100);\n  return answeredRequired === totalRequired ? 100 : Math.min(pct, 99);\n}\n\n// Pulisce risposte di pagine non piÃ¹ raggiungibili (simile a PageFlowEngine.cleanupUnreachablePages)\nexport async function cleanupUnreachablePages(cluster, pages, pageAnswers) {\n  const flatAnswers = Object.values(pageAnswers || {}).reduce((acc, answersObj) => {\n    Object.entries(answersObj || {}).forEach(([qid, v]) => {\n      acc[qid] = v;\n    });\n    return acc;\n  }, {});\n  const reachable = computeReachablePageIndices(pages, flatAnswers);\n  const updated = {\n    ...pageAnswers\n  };\n  const cleared = [];\n  for (const pageId of Object.keys(pageAnswers || {})) {\n    const idx = pages.findIndex(p => p.id === pageId);\n    if (idx >= 0 && !reachable.has(idx) && Object.keys(updated[pageId] || {}).length > 0) {\n      updated[pageId] = {};\n      cleared.push(pageId);\n      // Persisto svuotamento backend\n      await savePageAnswers(cluster, pageId, {});\n    }\n  }\n  return {\n    updated,\n    cleared\n  };\n}","map":{"version":3,"names":["USER_ID","base","jsonFetch","url","options","resp","fetch","headers","ok","msg","status","j","json","error","Error","fetchProgress","fetchQuestionnaire","cluster","fetchAnswers","saveAnswers","answers","method","body","JSON","stringify","resetAnswers","fetchPages","fetchPageAnswers","fetchSinglePage","pageId","savePageAnswers","resetPageAnswers","computeQuestionnaireProgress","questions","completed","Array","isArray","length","total","answered","Object","keys","filter","id","some","q","pct","Math","round","min","buildFullPath","_questions$","map","Map","startId","path","endReached","currentId","visited","Set","safety","has","_ref","_q$next$ans","push","add","get","next","ans","undefined","nextId","default","evaluateCondition","condition","flatAnswers","userValue","questionId","userStr","String","expected","value","op","operatorType","operator","uNum","Number","eNum","isNaN","resolveRoutingTargets","routing","pages","rules","sort","a","b","_a$priority","_b$priority","priority","matchedPages","r","nextPage","targets","forEach","pid","defaultAction","findIndex","p","i","computeReachablePageIndices","queue","idx","shift","page","conditionalRouting","t","calculatePageProgress","pageAnswers","values","reduce","acc","answersObj","entries","qid","v","reachable","size","totalRequired","answeredRequired","reqQuestions","required","saved","cleanupUnreachablePages","updated","cleared"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/api.js"],"sourcesContent":["// api.js - layer di servizio per il frontend React\n// Incapsula tutte le chiamate REST al backend\n\nconst USER_ID = 'user_123';\nconst base = '';// proxy in package.json punta a http://localhost:3001\n\nasync function jsonFetch(url, options = {}) {\n  const resp = await fetch(url, { headers: { 'Content-Type': 'application/json' }, ...options });\n  if (!resp.ok) {\n    let msg = `HTTP ${resp.status}`;\n    try { const j = await resp.json(); msg = j.error || msg; } catch {}\n    throw new Error(msg);\n  }\n  return resp.json();\n}\n\n// Lista progress questionari (clusters)\nexport async function fetchProgress() {\n  return jsonFetch(`/api/progress/${USER_ID}`);\n}\n\n// Domande formato classico\nexport async function fetchQuestionnaire(cluster) {\n  return jsonFetch(`/api/questionnaire/${cluster}`); // array\n}\n\n// Risposte formato classico\nexport async function fetchAnswers(cluster) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/${cluster}`);\n}\n\nexport async function saveAnswers(cluster, answers) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n    method: 'POST',\n    body: JSON.stringify({ answers })\n  });\n}\n\nexport async function resetAnswers(cluster) {\n  return jsonFetch(`/api/userAnswers/${USER_ID}/reset/${cluster}`, { method: 'POST' });\n}\n\n// Pagine (nuovo formato)\nexport async function fetchPages(cluster) {\n  return jsonFetch(`/api/pages/${cluster}`); // { title, pages: [...] }\n}\n\nexport async function fetchPageAnswers(cluster) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}`); // { pageAnswers }\n}\n\nexport async function fetchSinglePage(pageId) {\n  return jsonFetch(`/api/pages/page/${pageId}`);\n}\n\nexport async function savePageAnswers(cluster, pageId, answers) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}/${pageId}`, {\n    method: 'POST',\n    body: JSON.stringify({ answers })\n  });\n}\n\nexport async function resetPageAnswers(cluster) {\n  return jsonFetch(`/api/pageAnswers/${USER_ID}/${cluster}/reset`, { method: 'POST' });\n}\n\n// Utility progress locale per questionari classici\nexport function computeQuestionnaireProgress(questions, answers, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n  const total = questions.length;\n  const answered = Object.keys(answers || {}).filter(id => questions.some(q => q.id === id)).length;\n  const pct = Math.round((answered / total) * 100);\n  return completed ? 100 : Math.min(pct, 99);\n}\n\n// Motore path (replica buildFullPath)\nexport function buildFullPath(questions, answers) {\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions?.[0]?.id;\n  if (!startId) return { path: [], endReached: false };\n  if (!answers || Object.keys(answers).length === 0) return { path: [startId], endReached: false };\n  const path = [];\n  let currentId = startId;\n  let endReached = false;\n  const visited = new Set();\n  let safety = 0;\n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    path.push(currentId);\n    visited.add(currentId);\n    const q = map.get(currentId);\n    if (!q?.next) { endReached = true; break; }\n    const ans = answers[currentId];\n    if (ans === undefined) break;\n    let nextId = null;\n    if (typeof q.next === 'string') nextId = q.next; else if (typeof q.next === 'object') nextId = q.next[ans] ?? q.next.default ?? null;\n    if (!nextId || !map.has(nextId)) { endReached = true; break; }\n    currentId = nextId;\n  }\n  return { path, endReached };\n}\n\n// Motore pagine (semplificato data-driven)\nexport function evaluateCondition(condition, flatAnswers) {\n  const userValue = flatAnswers[condition.questionId];\n  if (userValue === undefined) return false;\n  const userStr = String(userValue);\n  const expected = String(condition.value);\n  const op = condition.operatorType || condition.operator;\n  if (op === '==' || op === '!=') return op === '==' ? userStr === expected : userStr !== expected;\n  const uNum = Number(userStr); const eNum = Number(expected);\n  if (Number.isNaN(uNum) || Number.isNaN(eNum)) return false;\n  switch (op) { case '>': return uNum > eNum; case '>=': return uNum >= eNum; case '<': return uNum < eNum; case '<=': return uNum <= eNum; default: return false; }\n}\n\nexport function resolveRoutingTargets(routing, pages, flatAnswers) {\n  if (!routing) return [];\n  const rules = [...(routing.rules || [])].sort((a,b) => (a.priority ?? 0) - (b.priority ?? 0));\n  const matchedPages = rules.filter(r => evaluateCondition(r.condition, flatAnswers)).map(r => r.nextPage);\n  const targets = new Set();\n  matchedPages.forEach(pid => targets.add(pid));\n  if (routing.defaultAction && routing.defaultAction !== 'complete') targets.add(routing.defaultAction);\n  return [...targets].map(id => pages.findIndex(p => p.id === id)).filter(i => i >= 0);\n}\n\nexport function computeReachablePageIndices(pages, flatAnswers) {\n  if (!Array.isArray(pages) || pages.length === 0) return new Set();\n  const visited = new Set();\n  const queue = [0];\n  while (queue.length) {\n    const idx = queue.shift();\n    if (idx < 0 || idx >= pages.length || visited.has(idx)) continue;\n    visited.add(idx);\n    const page = pages[idx];\n    if (page && page.conditionalRouting) {\n      const targets = resolveRoutingTargets(page.conditionalRouting, pages, flatAnswers);\n      targets.forEach(t => { if (!visited.has(t)) queue.push(t); });\n    } else {\n      const next = idx + 1; if (next < pages.length) queue.push(next);\n    }\n  }\n  return visited;\n}\n\nexport function calculatePageProgress(pages, pageAnswers) {\n  if (!Array.isArray(pages) || pages.length === 0) return 0;\n  const flatAnswers = Object.values(pageAnswers || {}).reduce((acc, answersObj) => { Object.entries(answersObj || {}).forEach(([qid,v]) => { acc[qid] = v; }); return acc; }, {});\n  const reachable = computeReachablePageIndices(pages, flatAnswers);\n  if (reachable.size === 0) return 0;\n  let totalRequired = 0; let answeredRequired = 0;\n  for (const idx of reachable) {\n    const page = pages[idx]; if (!page) continue;\n    const reqQuestions = (page.questions || []).filter(q => q.required === true);\n    if (reqQuestions.length === 0) continue;\n    totalRequired += reqQuestions.length;\n    const saved = pageAnswers[page.id] || {};\n    answeredRequired += reqQuestions.filter(q => saved[q.id] !== undefined).length;\n  }\n  if (totalRequired === 0) return 0;\n  const pct = Math.round((answeredRequired / totalRequired) * 100);\n  return answeredRequired === totalRequired ? 100 : Math.min(pct, 99);\n}\n\n// Pulisce risposte di pagine non piÃ¹ raggiungibili (simile a PageFlowEngine.cleanupUnreachablePages)\nexport async function cleanupUnreachablePages(cluster, pages, pageAnswers) {\n  const flatAnswers = Object.values(pageAnswers || {}).reduce((acc, answersObj) => { Object.entries(answersObj || {}).forEach(([qid,v]) => { acc[qid] = v; }); return acc; }, {});\n  const reachable = computeReachablePageIndices(pages, flatAnswers);\n  const updated = { ...pageAnswers };\n  const cleared = [];\n  for (const pageId of Object.keys(pageAnswers || {})) {\n    const idx = pages.findIndex(p => p.id === pageId);\n    if (idx >= 0 && !reachable.has(idx) && Object.keys(updated[pageId] || {}).length > 0) {\n      updated[pageId] = {};\n      cleared.push(pageId);\n      // Persisto svuotamento backend\n      await savePageAnswers(cluster, pageId, {});\n    }\n  }\n  return { updated, cleared };\n}\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,OAAO,GAAG,UAAU;AAC1B,MAAMC,IAAI,GAAG,EAAE,CAAC;;AAEhB,eAAeC,SAASA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1C,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAAEI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAAE,GAAGH;EAAQ,CAAC,CAAC;EAC9F,IAAI,CAACC,IAAI,CAACG,EAAE,EAAE;IACZ,IAAIC,GAAG,GAAG,QAAQJ,IAAI,CAACK,MAAM,EAAE;IAC/B,IAAI;MAAE,MAAMC,CAAC,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC,CAAC;MAAEH,GAAG,GAAGE,CAAC,CAACE,KAAK,IAAIJ,GAAG;IAAE,CAAC,CAAC,MAAM,CAAC;IAClE,MAAM,IAAIK,KAAK,CAACL,GAAG,CAAC;EACtB;EACA,OAAOJ,IAAI,CAACO,IAAI,CAAC,CAAC;AACpB;;AAEA;AACA,OAAO,eAAeG,aAAaA,CAAA,EAAG;EACpC,OAAOb,SAAS,CAAC,iBAAiBF,OAAO,EAAE,CAAC;AAC9C;;AAEA;AACA,OAAO,eAAegB,kBAAkBA,CAACC,OAAO,EAAE;EAChD,OAAOf,SAAS,CAAC,sBAAsBe,OAAO,EAAE,CAAC,CAAC,CAAC;AACrD;;AAEA;AACA,OAAO,eAAeC,YAAYA,CAACD,OAAO,EAAE;EAC1C,OAAOf,SAAS,CAAC,oBAAoBF,OAAO,IAAIiB,OAAO,EAAE,CAAC;AAC5D;AAEA,OAAO,eAAeE,WAAWA,CAACF,OAAO,EAAEG,OAAO,EAAE;EAClD,OAAOlB,SAAS,CAAC,oBAAoBF,OAAO,IAAIiB,OAAO,EAAE,EAAE;IACzDI,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ;IAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeK,YAAYA,CAACR,OAAO,EAAE;EAC1C,OAAOf,SAAS,CAAC,oBAAoBF,OAAO,UAAUiB,OAAO,EAAE,EAAE;IAAEI,MAAM,EAAE;EAAO,CAAC,CAAC;AACtF;;AAEA;AACA,OAAO,eAAeK,UAAUA,CAACT,OAAO,EAAE;EACxC,OAAOf,SAAS,CAAC,cAAce,OAAO,EAAE,CAAC,CAAC,CAAC;AAC7C;AAEA,OAAO,eAAeU,gBAAgBA,CAACV,OAAO,EAAE;EAC9C,OAAOf,SAAS,CAAC,oBAAoBF,OAAO,IAAIiB,OAAO,EAAE,CAAC,CAAC,CAAC;AAC9D;AAEA,OAAO,eAAeW,eAAeA,CAACC,MAAM,EAAE;EAC5C,OAAO3B,SAAS,CAAC,mBAAmB2B,MAAM,EAAE,CAAC;AAC/C;AAEA,OAAO,eAAeC,eAAeA,CAACb,OAAO,EAAEY,MAAM,EAAET,OAAO,EAAE;EAC9D,OAAOlB,SAAS,CAAC,oBAAoBF,OAAO,IAAIiB,OAAO,IAAIY,MAAM,EAAE,EAAE;IACnER,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ;IAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeW,gBAAgBA,CAACd,OAAO,EAAE;EAC9C,OAAOf,SAAS,CAAC,oBAAoBF,OAAO,IAAIiB,OAAO,QAAQ,EAAE;IAAEI,MAAM,EAAE;EAAO,CAAC,CAAC;AACtF;;AAEA;AACA,OAAO,SAASW,4BAA4BA,CAACC,SAAS,EAAEb,OAAO,EAAEc,SAAS,EAAE;EAC1E,IAAIA,SAAS,EAAE,OAAO,GAAG;EACzB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,IAAIA,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACjE,MAAMC,KAAK,GAAGL,SAAS,CAACI,MAAM;EAC9B,MAAME,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACrB,OAAO,IAAI,CAAC,CAAC,CAAC,CAACsB,MAAM,CAACC,EAAE,IAAIV,SAAS,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC,CAACN,MAAM;EACjG,MAAMS,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAET,QAAQ,GAAGD,KAAK,GAAI,GAAG,CAAC;EAChD,OAAOJ,SAAS,GAAG,GAAG,GAAGa,IAAI,CAACE,GAAG,CAACH,GAAG,EAAE,EAAE,CAAC;AAC5C;;AAEA;AACA,OAAO,SAASI,aAAaA,CAACjB,SAAS,EAAEb,OAAO,EAAE;EAAA,IAAA+B,WAAA;EAChD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAACpB,SAAS,IAAI,EAAE,EAAEmB,GAAG,CAACP,CAAC,IAAI,CAACA,CAAC,CAACF,EAAE,EAAEE,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAMS,OAAO,GAAGrB,SAAS,aAATA,SAAS,wBAAAkB,WAAA,GAATlB,SAAS,CAAG,CAAC,CAAC,cAAAkB,WAAA,uBAAdA,WAAA,CAAgBR,EAAE;EAClC,IAAI,CAACW,OAAO,EAAE,OAAO;IAAEC,IAAI,EAAE,EAAE;IAAEC,UAAU,EAAE;EAAM,CAAC;EACpD,IAAI,CAACpC,OAAO,IAAIoB,MAAM,CAACC,IAAI,CAACrB,OAAO,CAAC,CAACiB,MAAM,KAAK,CAAC,EAAE,OAAO;IAAEkB,IAAI,EAAE,CAACD,OAAO,CAAC;IAAEE,UAAU,EAAE;EAAM,CAAC;EAChG,MAAMD,IAAI,GAAG,EAAE;EACf,IAAIE,SAAS,GAAGH,OAAO;EACvB,IAAIE,UAAU,GAAG,KAAK;EACtB,MAAME,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,IAAIC,MAAM,GAAG,CAAC;EACd,OAAOH,SAAS,IAAI,CAACC,OAAO,CAACG,GAAG,CAACJ,SAAS,CAAC,IAAIG,MAAM,EAAE,GAAG,GAAG,EAAE;IAAA,IAAAE,IAAA,EAAAC,WAAA;IAC7DR,IAAI,CAACS,IAAI,CAACP,SAAS,CAAC;IACpBC,OAAO,CAACO,GAAG,CAACR,SAAS,CAAC;IACtB,MAAMZ,CAAC,GAAGO,GAAG,CAACc,GAAG,CAACT,SAAS,CAAC;IAC5B,IAAI,EAACZ,CAAC,aAADA,CAAC,eAADA,CAAC,CAAEsB,IAAI,GAAE;MAAEX,UAAU,GAAG,IAAI;MAAE;IAAO;IAC1C,MAAMY,GAAG,GAAGhD,OAAO,CAACqC,SAAS,CAAC;IAC9B,IAAIW,GAAG,KAAKC,SAAS,EAAE;IACvB,IAAIC,MAAM,GAAG,IAAI;IACjB,IAAI,OAAOzB,CAAC,CAACsB,IAAI,KAAK,QAAQ,EAAEG,MAAM,GAAGzB,CAAC,CAACsB,IAAI,CAAC,KAAM,IAAI,OAAOtB,CAAC,CAACsB,IAAI,KAAK,QAAQ,EAAEG,MAAM,IAAAR,IAAA,IAAAC,WAAA,GAAGlB,CAAC,CAACsB,IAAI,CAACC,GAAG,CAAC,cAAAL,WAAA,cAAAA,WAAA,GAAIlB,CAAC,CAACsB,IAAI,CAACI,OAAO,cAAAT,IAAA,cAAAA,IAAA,GAAI,IAAI;IACpI,IAAI,CAACQ,MAAM,IAAI,CAAClB,GAAG,CAACS,GAAG,CAACS,MAAM,CAAC,EAAE;MAAEd,UAAU,GAAG,IAAI;MAAE;IAAO;IAC7DC,SAAS,GAAGa,MAAM;EACpB;EACA,OAAO;IAAEf,IAAI;IAAEC;EAAW,CAAC;AAC7B;;AAEA;AACA,OAAO,SAASgB,iBAAiBA,CAACC,SAAS,EAAEC,WAAW,EAAE;EACxD,MAAMC,SAAS,GAAGD,WAAW,CAACD,SAAS,CAACG,UAAU,CAAC;EACnD,IAAID,SAAS,KAAKN,SAAS,EAAE,OAAO,KAAK;EACzC,MAAMQ,OAAO,GAAGC,MAAM,CAACH,SAAS,CAAC;EACjC,MAAMI,QAAQ,GAAGD,MAAM,CAACL,SAAS,CAACO,KAAK,CAAC;EACxC,MAAMC,EAAE,GAAGR,SAAS,CAACS,YAAY,IAAIT,SAAS,CAACU,QAAQ;EACvD,IAAIF,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAK,IAAI,EAAE,OAAOA,EAAE,KAAK,IAAI,GAAGJ,OAAO,KAAKE,QAAQ,GAAGF,OAAO,KAAKE,QAAQ;EAChG,MAAMK,IAAI,GAAGC,MAAM,CAACR,OAAO,CAAC;EAAE,MAAMS,IAAI,GAAGD,MAAM,CAACN,QAAQ,CAAC;EAC3D,IAAIM,MAAM,CAACE,KAAK,CAACH,IAAI,CAAC,IAAIC,MAAM,CAACE,KAAK,CAACD,IAAI,CAAC,EAAE,OAAO,KAAK;EAC1D,QAAQL,EAAE;IAAI,KAAK,GAAG;MAAE,OAAOG,IAAI,GAAGE,IAAI;IAAE,KAAK,IAAI;MAAE,OAAOF,IAAI,IAAIE,IAAI;IAAE,KAAK,GAAG;MAAE,OAAOF,IAAI,GAAGE,IAAI;IAAE,KAAK,IAAI;MAAE,OAAOF,IAAI,IAAIE,IAAI;IAAE;MAAS,OAAO,KAAK;EAAE;AACnK;AAEA,OAAO,SAASE,qBAAqBA,CAACC,OAAO,EAAEC,KAAK,EAAEhB,WAAW,EAAE;EACjE,IAAI,CAACe,OAAO,EAAE,OAAO,EAAE;EACvB,MAAME,KAAK,GAAG,CAAC,IAAIF,OAAO,CAACE,KAAK,IAAI,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC;IAAA,IAAAC,WAAA,EAAAC,WAAA;IAAA,OAAK,EAAAD,WAAA,GAACF,CAAC,CAACI,QAAQ,cAAAF,WAAA,cAAAA,WAAA,GAAI,CAAC,MAAAC,WAAA,GAAKF,CAAC,CAACG,QAAQ,cAAAD,WAAA,cAAAA,WAAA,GAAI,CAAC,CAAC;EAAA,EAAC;EAC7F,MAAME,YAAY,GAAGP,KAAK,CAACjD,MAAM,CAACyD,CAAC,IAAI3B,iBAAiB,CAAC2B,CAAC,CAAC1B,SAAS,EAAEC,WAAW,CAAC,CAAC,CAACtB,GAAG,CAAC+C,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC;EACxG,MAAMC,OAAO,GAAG,IAAI1C,GAAG,CAAC,CAAC;EACzBuC,YAAY,CAACI,OAAO,CAACC,GAAG,IAAIF,OAAO,CAACpC,GAAG,CAACsC,GAAG,CAAC,CAAC;EAC7C,IAAId,OAAO,CAACe,aAAa,IAAIf,OAAO,CAACe,aAAa,KAAK,UAAU,EAAEH,OAAO,CAACpC,GAAG,CAACwB,OAAO,CAACe,aAAa,CAAC;EACrG,OAAO,CAAC,GAAGH,OAAO,CAAC,CAACjD,GAAG,CAACT,EAAE,IAAI+C,KAAK,CAACe,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC/D,EAAE,KAAKA,EAAE,CAAC,CAAC,CAACD,MAAM,CAACiE,CAAC,IAAIA,CAAC,IAAI,CAAC,CAAC;AACtF;AAEA,OAAO,SAASC,2BAA2BA,CAAClB,KAAK,EAAEhB,WAAW,EAAE;EAC9D,IAAI,CAACvC,KAAK,CAACC,OAAO,CAACsD,KAAK,CAAC,IAAIA,KAAK,CAACrD,MAAM,KAAK,CAAC,EAAE,OAAO,IAAIsB,GAAG,CAAC,CAAC;EACjE,MAAMD,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMkD,KAAK,GAAG,CAAC,CAAC,CAAC;EACjB,OAAOA,KAAK,CAACxE,MAAM,EAAE;IACnB,MAAMyE,GAAG,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC;IACzB,IAAID,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAIpB,KAAK,CAACrD,MAAM,IAAIqB,OAAO,CAACG,GAAG,CAACiD,GAAG,CAAC,EAAE;IACxDpD,OAAO,CAACO,GAAG,CAAC6C,GAAG,CAAC;IAChB,MAAME,IAAI,GAAGtB,KAAK,CAACoB,GAAG,CAAC;IACvB,IAAIE,IAAI,IAAIA,IAAI,CAACC,kBAAkB,EAAE;MACnC,MAAMZ,OAAO,GAAGb,qBAAqB,CAACwB,IAAI,CAACC,kBAAkB,EAAEvB,KAAK,EAAEhB,WAAW,CAAC;MAClF2B,OAAO,CAACC,OAAO,CAACY,CAAC,IAAI;QAAE,IAAI,CAACxD,OAAO,CAACG,GAAG,CAACqD,CAAC,CAAC,EAAEL,KAAK,CAAC7C,IAAI,CAACkD,CAAC,CAAC;MAAE,CAAC,CAAC;IAC/D,CAAC,MAAM;MACL,MAAM/C,IAAI,GAAG2C,GAAG,GAAG,CAAC;MAAE,IAAI3C,IAAI,GAAGuB,KAAK,CAACrD,MAAM,EAAEwE,KAAK,CAAC7C,IAAI,CAACG,IAAI,CAAC;IACjE;EACF;EACA,OAAOT,OAAO;AAChB;AAEA,OAAO,SAASyD,qBAAqBA,CAACzB,KAAK,EAAE0B,WAAW,EAAE;EACxD,IAAI,CAACjF,KAAK,CAACC,OAAO,CAACsD,KAAK,CAAC,IAAIA,KAAK,CAACrD,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACzD,MAAMqC,WAAW,GAAGlC,MAAM,CAAC6E,MAAM,CAACD,WAAW,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAK;IAAEhF,MAAM,CAACiF,OAAO,CAACD,UAAU,IAAI,CAAC,CAAC,CAAC,CAAClB,OAAO,CAAC,CAAC,CAACoB,GAAG,EAACC,CAAC,CAAC,KAAK;MAAEJ,GAAG,CAACG,GAAG,CAAC,GAAGC,CAAC;IAAE,CAAC,CAAC;IAAE,OAAOJ,GAAG;EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/K,MAAMK,SAAS,GAAGhB,2BAA2B,CAAClB,KAAK,EAAEhB,WAAW,CAAC;EACjE,IAAIkD,SAAS,CAACC,IAAI,KAAK,CAAC,EAAE,OAAO,CAAC;EAClC,IAAIC,aAAa,GAAG,CAAC;EAAE,IAAIC,gBAAgB,GAAG,CAAC;EAC/C,KAAK,MAAMjB,GAAG,IAAIc,SAAS,EAAE;IAC3B,MAAMZ,IAAI,GAAGtB,KAAK,CAACoB,GAAG,CAAC;IAAE,IAAI,CAACE,IAAI,EAAE;IACpC,MAAMgB,YAAY,GAAG,CAAChB,IAAI,CAAC/E,SAAS,IAAI,EAAE,EAAES,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACoF,QAAQ,KAAK,IAAI,CAAC;IAC5E,IAAID,YAAY,CAAC3F,MAAM,KAAK,CAAC,EAAE;IAC/ByF,aAAa,IAAIE,YAAY,CAAC3F,MAAM;IACpC,MAAM6F,KAAK,GAAGd,WAAW,CAACJ,IAAI,CAACrE,EAAE,CAAC,IAAI,CAAC,CAAC;IACxCoF,gBAAgB,IAAIC,YAAY,CAACtF,MAAM,CAACG,CAAC,IAAIqF,KAAK,CAACrF,CAAC,CAACF,EAAE,CAAC,KAAK0B,SAAS,CAAC,CAAChC,MAAM;EAChF;EACA,IAAIyF,aAAa,KAAK,CAAC,EAAE,OAAO,CAAC;EACjC,MAAMhF,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAE+E,gBAAgB,GAAGD,aAAa,GAAI,GAAG,CAAC;EAChE,OAAOC,gBAAgB,KAAKD,aAAa,GAAG,GAAG,GAAG/E,IAAI,CAACE,GAAG,CAACH,GAAG,EAAE,EAAE,CAAC;AACrE;;AAEA;AACA,OAAO,eAAeqF,uBAAuBA,CAAClH,OAAO,EAAEyE,KAAK,EAAE0B,WAAW,EAAE;EACzE,MAAM1C,WAAW,GAAGlC,MAAM,CAAC6E,MAAM,CAACD,WAAW,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAK;IAAEhF,MAAM,CAACiF,OAAO,CAACD,UAAU,IAAI,CAAC,CAAC,CAAC,CAAClB,OAAO,CAAC,CAAC,CAACoB,GAAG,EAACC,CAAC,CAAC,KAAK;MAAEJ,GAAG,CAACG,GAAG,CAAC,GAAGC,CAAC;IAAE,CAAC,CAAC;IAAE,OAAOJ,GAAG;EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/K,MAAMK,SAAS,GAAGhB,2BAA2B,CAAClB,KAAK,EAAEhB,WAAW,CAAC;EACjE,MAAM0D,OAAO,GAAG;IAAE,GAAGhB;EAAY,CAAC;EAClC,MAAMiB,OAAO,GAAG,EAAE;EAClB,KAAK,MAAMxG,MAAM,IAAIW,MAAM,CAACC,IAAI,CAAC2E,WAAW,IAAI,CAAC,CAAC,CAAC,EAAE;IACnD,MAAMN,GAAG,GAAGpB,KAAK,CAACe,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC/D,EAAE,KAAKd,MAAM,CAAC;IACjD,IAAIiF,GAAG,IAAI,CAAC,IAAI,CAACc,SAAS,CAAC/D,GAAG,CAACiD,GAAG,CAAC,IAAItE,MAAM,CAACC,IAAI,CAAC2F,OAAO,CAACvG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE;MACpF+F,OAAO,CAACvG,MAAM,CAAC,GAAG,CAAC,CAAC;MACpBwG,OAAO,CAACrE,IAAI,CAACnC,MAAM,CAAC;MACpB;MACA,MAAMC,eAAe,CAACb,OAAO,EAAEY,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5C;EACF;EACA,OAAO;IAAEuG,OAAO;IAAEC;EAAQ,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnaireLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport './QuestionnaireLoader.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'user_123';\nfunction getNextId(q, ansVal) {\n  var _ref, _q$next$ansVal;\n  if (!q || !q.next) return null;\n  if (typeof q.next === 'string') return q.next;\n  if (typeof q.next === 'object') return (_ref = (_q$next$ansVal = q.next[ansVal]) !== null && _q$next$ansVal !== void 0 ? _q$next$ansVal : q.next.default) !== null && _ref !== void 0 ? _ref : null;\n  return null;\n}\n\n// QuestionnaireLoader.js - fix completo\nfunction buildFullPath(questions, answers) {\n  var _questions$;\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions === null || questions === void 0 ? void 0 : (_questions$ = questions[0]) === null || _questions$ === void 0 ? void 0 : _questions$.id;\n  if (!startId) return {\n    path: [],\n    endReached: false\n  };\n\n  // Se non ci sono risposte, ritorna solo la prima domanda\n  if (Object.keys(answers).length === 0) {\n    return {\n      path: [startId],\n      endReached: false\n    };\n  }\n\n  // Costruisci il percorso seguendo le risposte esistenti\n  const path = [];\n  let currentId = startId;\n  let endReached = false;\n  const visited = new Set();\n  let safety = 0;\n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    path.push(currentId);\n    visited.add(currentId);\n    const q = map.get(currentId);\n    if (!(q !== null && q !== void 0 && q.next)) {\n      endReached = true;\n      break;\n    }\n    const ans = answers[currentId];\n\n    // Se non c'è risposta, fermati qui (non aggiungere altre domande)\n    if (ans === undefined) {\n      break;\n    }\n\n    // Segui la risposta effettiva\n    let nextId = null;\n    if (typeof q.next === 'string') {\n      nextId = q.next;\n    } else if (typeof q.next === 'object') {\n      var _ref2, _q$next$ans;\n      nextId = (_ref2 = (_q$next$ans = q.next[ans]) !== null && _q$next$ans !== void 0 ? _q$next$ans : q.next.default) !== null && _ref2 !== void 0 ? _ref2 : null;\n    }\n    if (!nextId || !map.has(nextId)) {\n      endReached = true;\n      break;\n    }\n    currentId = nextId;\n  }\n  return {\n    path,\n    endReached\n  };\n}\n\n// QuestionnaireLoader.js - fix calcolo percentuale\nfunction computeProgress(questions, answers, stack, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n\n  // Usa sempre il totale delle domande del questionario, non lo stack\n  const totalQuestions = questions.length;\n  const answeredCount = Object.keys(answers).filter(id => questions.some(q => q.id === id)).length;\n  const percentage = Math.round(answeredCount / totalQuestions * 100);\n  return completed ? 100 : Math.min(percentage, 99);\n}\nconst QuestionnaireLoader = () => {\n  _s();\n  const {\n    cluster\n  } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [stack, setStack] = useState([]); // array di id domande visitate in ordine\n  const [currentId, setCurrentId] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // QuestionnaireLoader.js - debug dell'inizializzazione\n  useEffect(() => {\n    if (!cluster) {\n      setLoading(false);\n      navigate('/');\n      return;\n    }\n    console.log('🔍 Inizializzazione questionario:', cluster);\n    setLoading(true);\n    setError('');\n    Promise.all([fetch(`/api/questionnaire/${cluster}`), fetch(`/api/userAnswers/${USER_ID}/${cluster}`)]).then(async ([qsRes, ansRes]) => {\n      var _qs$, _qs$2;\n      if (!qsRes.ok) throw new Error('Questionario non disponibile');\n      if (!ansRes.ok) throw new Error('Risposte non disponibili');\n      const qs = await qsRes.json();\n      const userData = await ansRes.json();\n      const a = (userData === null || userData === void 0 ? void 0 : userData.answers) || {};\n      console.log('📋 Domande caricate:', qs);\n      console.log('💾 Risposte caricate:', a);\n      setQuestions(Array.isArray(qs) ? qs : []);\n      setAnswers(a);\n      const {\n        path,\n        endReached\n      } = buildFullPath(qs || [], a);\n      console.log('🛤️ Percorso costruito:', path);\n      console.log('🎯 Prima domanda dovrebbe essere:', qs === null || qs === void 0 ? void 0 : (_qs$ = qs[0]) === null || _qs$ === void 0 ? void 0 : _qs$.id);\n      const pathNonVuoto = path.length > 0 ? path : qs !== null && qs !== void 0 && (_qs$2 = qs[0]) !== null && _qs$2 !== void 0 && _qs$2.id ? [qs[0].id] : [];\n      console.log('📍 Stack finale:', pathNonVuoto);\n      setStack(pathNonVuoto);\n      setCurrentId(pathNonVuoto[pathNonVuoto.length - 1] || null);\n      const allAnsweredOnPath = path.every(id => a[id] !== undefined);\n      setCompleted(endReached && allAnsweredOnPath);\n      setLoading(false);\n    }).catch(e => {\n      console.error('❌ Errore caricamento:', e);\n      setError('Errore di caricamento');\n      setLoading(false);\n    });\n  }, [cluster, navigate]);\n  const saveAnswers = newAnswers => {\n    fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        answers: newAnswers\n      })\n    }).catch(() => {});\n  };\n  const handleAnswer = (questionId, answerValue) => {\n    // se sto rispondendo a una domanda nel mezzo del percorso, tronco stack e risposte a valle\n    const idxInStack = stack.indexOf(questionId);\n    let trimmedAnswers = {\n      ...answers\n    };\n    if (idxInStack !== -1 && idxInStack < stack.length - 1) {\n      const toRemove = stack.slice(idxInStack + 1);\n      toRemove.forEach(id => {\n        delete trimmedAnswers[id];\n      });\n    }\n    trimmedAnswers[questionId] = answerValue;\n    setAnswers(trimmedAnswers);\n    const q = questions.find(qq => qq.id === questionId);\n    const nextId = getNextId(q, answerValue);\n    if (nextId && questions.some(qq => qq.id === nextId)) {\n      const newStack = [...stack.slice(0, idxInStack + 1), nextId];\n      setStack(newStack);\n      setCurrentId(nextId);\n      setCompleted(false);\n    } else {\n      // fine flusso\n      setStack(stack.slice(0, idxInStack + 1));\n      setCompleted(true);\n    }\n    saveAnswers(trimmedAnswers);\n  };\n\n  // QuestionnaireLoader.js - cancella risposta quando vai indietro\n  const handleBack = () => {\n    if (!stack.length) {\n      navigate('/');\n      return;\n    }\n    if (stack.length === 1) {\n      navigate('/');\n      return;\n    }\n\n    // Trova l'ID della domanda corrente (quella da cui stiamo tornando indietro)\n    const currentQuestionId = stack[stack.length - 1];\n\n    // Rimuovi la risposta della domanda corrente\n    const updatedAnswers = {\n      ...answers\n    };\n    if (currentQuestionId && updatedAnswers[currentQuestionId] !== undefined) {\n      delete updatedAnswers[currentQuestionId];\n      setAnswers(updatedAnswers);\n\n      // Salva le risposte aggiornate (questo triggera il ricalcolo nel backend)\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          answers: updatedAnswers\n        })\n      }).then(() => {\n        // Dopo aver salvato, forza il ricalcolo della percentuale locale\n        const newProgress = computeProgress(questions, updatedAnswers, stack.slice(0, -1), false);\n        console.log('📊 Nuova percentuale dopo indietro:', newProgress);\n      }).catch(() => {});\n    }\n\n    // Vai alla domanda precedente\n    const newStack = stack.slice(0, -1);\n    setStack(newStack);\n    setCurrentId(newStack[newStack.length - 1] || null);\n    setCompleted(false);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Caricamento...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: () => navigate('/'),\n      children: \"Torna all\\u2019elenco\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n  if (!questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nessuna domanda disponibile.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: () => navigate('/'),\n        children: \"Torna all\\u2019elenco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n  const progress = computeProgress(questions, answers, stack, completed);\n  if (completed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completed-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-outer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-text\",\n          children: \"100% completato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Questionario completato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: () => navigate('/'),\n        children: \"Torna all'elenco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions.find(q => q.id === currentId) || questions[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-outer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-inner\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% completato\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: currentQuestion,\n        onAnswer: val => handleAnswer(currentQuestion.id, val)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-row\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-back\",\n          onClick: handleBack,\n          children: \"\\u2190 Indietro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireLoader, \"pcT1gp6/7nQ6jrTmEoGnHCOWm/k=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuestionnaireLoader;\nexport default QuestionnaireLoader;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireLoader\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Question","jsxDEV","_jsxDEV","Fragment","_Fragment","USER_ID","getNextId","q","ansVal","_ref","_q$next$ansVal","next","default","buildFullPath","questions","answers","_questions$","map","Map","id","startId","path","endReached","Object","keys","length","currentId","visited","Set","safety","has","push","add","get","ans","undefined","nextId","_ref2","_q$next$ans","computeProgress","stack","completed","Array","isArray","totalQuestions","answeredCount","filter","some","percentage","Math","round","min","QuestionnaireLoader","_s","cluster","navigate","setQuestions","setAnswers","setStack","setCurrentId","setCompleted","loading","setLoading","error","setError","console","log","Promise","all","fetch","then","qsRes","ansRes","_qs$","_qs$2","ok","Error","qs","json","userData","a","pathNonVuoto","allAnsweredOnPath","every","catch","e","saveAnswers","newAnswers","method","headers","body","JSON","stringify","handleAnswer","questionId","answerValue","idxInStack","indexOf","trimmedAnswers","toRemove","slice","forEach","find","qq","newStack","handleBack","currentQuestionId","updatedAnswers","newProgress","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","progress","currentQuestion","style","width","question","onAnswer","val","_c","$RefreshReg$"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnaireLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Question from './Question';\nimport './QuestionnaireLoader.css';\n\nconst USER_ID = 'user_123';\n\nfunction getNextId(q, ansVal) {\n  if (!q || !q.next) return null;\n  if (typeof q.next === 'string') return q.next;\n  if (typeof q.next === 'object') return q.next[ansVal] ?? q.next.default ?? null;\n  return null;\n}\n\n// QuestionnaireLoader.js - fix completo\nfunction buildFullPath(questions, answers) {\n  const map = new Map((questions || []).map(q => [q.id, q]));\n  const startId = questions?.[0]?.id;\n  \n  if (!startId) return { path: [], endReached: false };\n  \n  // Se non ci sono risposte, ritorna solo la prima domanda\n  if (Object.keys(answers).length === 0) {\n    return { path: [startId], endReached: false };\n  }\n  \n  // Costruisci il percorso seguendo le risposte esistenti\n  const path = [];\n  let currentId = startId;\n  let endReached = false;\n  const visited = new Set();\n  let safety = 0;\n  \n  while (currentId && !visited.has(currentId) && safety++ < 200) {\n    path.push(currentId);\n    visited.add(currentId);\n    const q = map.get(currentId);\n    \n    if (!q?.next) { \n      endReached = true; \n      break; \n    }\n    \n    const ans = answers[currentId];\n    \n    // Se non c'è risposta, fermati qui (non aggiungere altre domande)\n    if (ans === undefined) {\n      break;\n    }\n    \n    // Segui la risposta effettiva\n    let nextId = null;\n    if (typeof q.next === 'string') {\n      nextId = q.next;\n    } else if (typeof q.next === 'object') {\n      nextId = q.next[ans] ?? q.next.default ?? null;\n    }\n    \n    if (!nextId || !map.has(nextId)) { \n      endReached = true; \n      break; \n    }\n    currentId = nextId;\n  }\n  \n  return { path, endReached };\n}\n\n// QuestionnaireLoader.js - fix calcolo percentuale\nfunction computeProgress(questions, answers, stack, completed) {\n  if (completed) return 100;\n  if (!Array.isArray(questions) || questions.length === 0) return 0;\n  \n  // Usa sempre il totale delle domande del questionario, non lo stack\n  const totalQuestions = questions.length;\n  const answeredCount = Object.keys(answers).filter(id => \n    questions.some(q => q.id === id)\n  ).length;\n  \n  const percentage = Math.round((answeredCount / totalQuestions) * 100);\n  return completed ? 100 : Math.min(percentage, 99);\n}\n\nconst QuestionnaireLoader = () => {\n  const { cluster } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [stack, setStack] = useState([]); // array di id domande visitate in ordine\n  const [currentId, setCurrentId] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // QuestionnaireLoader.js - debug dell'inizializzazione\n  useEffect(() => {\n    if (!cluster) {\n      setLoading(false);\n      navigate('/');\n      return;\n    }\n    \n    console.log('🔍 Inizializzazione questionario:', cluster);\n    \n    setLoading(true);\n    setError('');\n    \n    Promise.all([\n      fetch(`/api/questionnaire/${cluster}`),\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`)\n    ])\n      .then(async ([qsRes, ansRes]) => {\n        if (!qsRes.ok) throw new Error('Questionario non disponibile');\n        if (!ansRes.ok) throw new Error('Risposte non disponibili');\n        \n        const qs = await qsRes.json();\n        const userData = await ansRes.json();\n        const a = userData?.answers || {};\n        \n        console.log('📋 Domande caricate:', qs);\n        console.log('💾 Risposte caricate:', a);\n        \n        setQuestions(Array.isArray(qs) ? qs : []);\n        setAnswers(a);\n\n        const { path, endReached } = buildFullPath(qs || [], a);\n        console.log('🛤️ Percorso costruito:', path);\n        console.log('🎯 Prima domanda dovrebbe essere:', qs?.[0]?.id);\n        \n        const pathNonVuoto = path.length > 0 ? path : (qs?.[0]?.id ? [qs[0].id] : []);\n        console.log('📍 Stack finale:', pathNonVuoto);\n        \n        setStack(pathNonVuoto);\n        setCurrentId(pathNonVuoto[pathNonVuoto.length - 1] || null);\n        \n        const allAnsweredOnPath = path.every(id => a[id] !== undefined);\n        setCompleted(endReached && allAnsweredOnPath);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.error('❌ Errore caricamento:', e);\n        setError('Errore di caricamento');\n        setLoading(false);\n      });\n  }, [cluster, navigate]);\n\n  const saveAnswers = (newAnswers) => {\n    fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ answers: newAnswers })\n    }).catch(() => {});\n  };\n\n  const handleAnswer = (questionId, answerValue) => {\n    // se sto rispondendo a una domanda nel mezzo del percorso, tronco stack e risposte a valle\n    const idxInStack = stack.indexOf(questionId);\n    let trimmedAnswers = { ...answers };\n    if (idxInStack !== -1 && idxInStack < stack.length - 1) {\n      const toRemove = stack.slice(idxInStack + 1);\n      toRemove.forEach(id => { delete trimmedAnswers[id]; });\n    }\n    trimmedAnswers[questionId] = answerValue;\n    setAnswers(trimmedAnswers);\n\n    const q = questions.find(qq => qq.id === questionId);\n    const nextId = getNextId(q, answerValue);\n\n    if (nextId && questions.some(qq => qq.id === nextId)) {\n      const newStack = [...stack.slice(0, idxInStack + 1), nextId];\n      setStack(newStack);\n      setCurrentId(nextId);\n      setCompleted(false);\n    } else {\n      // fine flusso\n      setStack(stack.slice(0, idxInStack + 1));\n      setCompleted(true);\n    }\n\n    saveAnswers(trimmedAnswers);\n  };\n\n  // QuestionnaireLoader.js - cancella risposta quando vai indietro\n  const handleBack = () => {\n    if (!stack.length) {\n      navigate('/');\n      return;\n    }\n    if (stack.length === 1) {\n      navigate('/');\n      return;\n    }\n    \n    // Trova l'ID della domanda corrente (quella da cui stiamo tornando indietro)\n    const currentQuestionId = stack[stack.length - 1];\n    \n    // Rimuovi la risposta della domanda corrente\n    const updatedAnswers = { ...answers };\n    if (currentQuestionId && updatedAnswers[currentQuestionId] !== undefined) {\n      delete updatedAnswers[currentQuestionId];\n      setAnswers(updatedAnswers);\n      \n      // Salva le risposte aggiornate (questo triggera il ricalcolo nel backend)\n      fetch(`/api/userAnswers/${USER_ID}/${cluster}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ answers: updatedAnswers })\n      }).then(() => {\n        // Dopo aver salvato, forza il ricalcolo della percentuale locale\n        const newProgress = computeProgress(questions, updatedAnswers, stack.slice(0, -1), false);\n        console.log('📊 Nuova percentuale dopo indietro:', newProgress);\n      }).catch(() => {});\n    }\n    \n    // Vai alla domanda precedente\n    const newStack = stack.slice(0, -1);\n    setStack(newStack);\n    setCurrentId(newStack[newStack.length - 1] || null);\n    setCompleted(false);\n  };\n\n  if (loading) return <div>Caricamento...</div>;\n  if (error) return (\n    <div>\n      <p>{error}</p>\n      <button className=\"btn-back\" onClick={() => navigate('/')}>Torna all’elenco</button>\n    </div>\n  );\n\n  if (!questions.length) {\n    return (\n      <div>\n        <p>Nessuna domanda disponibile.</p>\n        <button className=\"btn-back\" onClick={() => navigate('/')}>Torna all’elenco</button>\n      </div>\n    );\n  }\n\n  const progress = computeProgress(questions, answers, stack, completed);\n\n  if (completed) {\n    return (\n      <div className=\"completed-wrap\">\n        <div className=\"progress\">\n          <div className=\"progress-bar-outer\">\n            <div className=\"progress-bar-inner\" />\n          </div>\n          <div className=\"progress-text\">100% completato</div>\n        </div>\n        <h2>Questionario completato</h2>\n        <button className=\"btn-back\" onClick={() => navigate('/')}>\n          Torna all'elenco\n        </button>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions.find(q => q.id === currentId) || questions[0];\n\n  return (\n    <div>\n      <div className=\"progress\">\n        <div className=\"progress-bar-outer\">\n          <div className=\"progress-bar-inner\" style={{ width: `${progress}%` }} />\n        </div>\n        <div className=\"progress-text\">{progress}% completato</div>\n      </div>\n\n      {currentQuestion && (\n        <>\n          <Question\n            question={currentQuestion}\n            onAnswer={val => handleAnswer(currentQuestion.id, val)}\n          />\n          <div className=\"nav-row\">\n            <button className=\"btn-back\" onClick={handleBack}>\n              ← Indietro\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionnaireLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
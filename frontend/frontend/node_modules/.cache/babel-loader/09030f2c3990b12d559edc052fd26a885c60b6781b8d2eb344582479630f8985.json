{"ast":null,"code":"var _jsxFileName = \"/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport { fetchPages, fetchPageAnswers, savePageAnswers, calculatePageProgress, cleanupUnreachablePages, resetAllForCluster, computeReachablePageIndices } from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionnairePageFlow() {\n  _s();\n  const {\n    cluster\n  } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  // const [resetting, setResetting] = useState(false);\n  const [visitedStack, setVisitedStack] = useState([]); // array di indici pagina in ordine di visita\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([fetchPages(cluster), fetchPageAnswers(cluster)]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    const flat = Object.values(pageAnswers || {}).reduce((acc, pa) => {\n      Object.entries(pa || {}).forEach(([k, v]) => acc[k] = v);\n      return acc;\n    }, {});\n    const reachable = computeReachablePageIndices(pages, flat);\n    // Scorri solo le pagine raggiungibili in ordine di definizione\n    for (let i = 0; i < pages.length; i++) {\n      if (!reachable.has(i)) continue; // ignora non raggiungibili\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    // Se tutte le raggiungibili sono complete, tieni indice sull'ultima raggiungibile\n    let lastReachable = 0;\n    reachable.forEach(idx => {\n      if (idx > lastReachable) lastReachable = idx;\n    });\n    return lastReachable;\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Completamento solo sulle pagine raggiungibili\n    const flat = Object.values(pageAnswers || {}).reduce((acc, pa) => {\n      Object.entries(pa || {}).forEach(([k, v]) => acc[k] = v);\n      return acc;\n    }, {});\n    const reachable = computeReachablePageIndices(pages, flat);\n    let allReachableComplete = true;\n    reachable.forEach(idx => {\n      const page = pages[idx];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) allReachableComplete = false;\n    });\n    setCompleted(allReachableComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n\n  // Mantieni lo stack coerente quando cambia currentIndex (push se nuovo)\n  useEffect(() => {\n    setVisitedStack(prev => {\n      if (!pages.length) return [];\n      if (currentIndex < 0 || currentIndex >= pages.length) return prev;\n      if (prev.length === 0) return [currentIndex];\n      const last = prev[prev.length - 1];\n      if (last === currentIndex) return prev; // niente duplicati consecutivi\n      // Se l'indice è già nello stack ma non è l'ultimo, lo tagliamo fino a quell'indice\n      const existingPos = prev.indexOf(currentIndex);\n      if (existingPos >= 0) return prev.slice(0, existingPos + 1);\n      return [...prev, currentIndex];\n    });\n  }, [currentIndex, pages]);\n\n  // Scroll & focus top quando cambia pagina corrente\n  useEffect(() => {\n    // Evita durante caricamenti iniziali\n    if (loading) return;\n    // Smooth scroll top\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    // Focus sul titolo se presente\n    setTimeout(() => {\n      const heading = document.querySelector('.page-view h2');\n      if (heading) {\n        heading.setAttribute('tabindex', '-1');\n        heading.focus({\n          preventScroll: true\n        });\n      }\n    }, 50);\n  }, [currentIndex, loading]);\n  const handleSubmitPage = async answers => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({\n        ...prev,\n        [page.id]: answers\n      }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Cleanup pagine non più raggiungibili dopo questo salvataggio\n      try {\n        const {\n          updated,\n          cleared\n        } = await cleanupUnreachablePages(cluster, pages, {\n          ...pageAnswers,\n          [page.id]: answers\n        });\n        if (cleared.length) {\n          setPageAnswers(updated);\n          // Aggiorna progress immediatamente se necessario\n        }\n      } catch (e) {\n        // non bloccare il flusso se cleanup fallisce\n        // console.warn('Cleanup pagine non raggiungibili fallito', e);\n      }\n\n      // Nuova logica: dopo il salvataggio, determina l'indice della prossima pagina incompleta tra quelle raggiungibili.\n      const flatAfter = Object.values({\n        ...pageAnswers,\n        [page.id]: answers\n      }).reduce((acc, pa) => {\n        Object.entries(pa || {}).forEach(([k, v]) => acc[k] = v);\n        return acc;\n      }, {});\n      const reachable = computeReachablePageIndices(pages, flatAfter);\n      // Trova prima raggiungibile non completa\n      let nextIdx = null;\n      pages.forEach((p, idx) => {\n        if (nextIdx !== null) return;\n        if (!reachable.has(idx)) return;\n        const req = (p.questions || []).filter(q => q.required);\n        const saved = idx === currentIndex ? answers : pageAnswers[p.id] || {};\n        const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n        if (!done) nextIdx = idx;\n      });\n      if (nextIdx === null) {\n        setCompleted(true);\n      } else {\n        setCurrentIndex(nextIdx);\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleBack = () => {\n    if (visitedStack.length <= 1) {\n      navigate('/');\n      return;\n    }\n    // Ritorna alla pagina precedente nello stack\n    const newStack = visitedStack.slice(0, -1);\n    const targetIndex = newStack[newStack.length - 1];\n    const targetPage = pages[targetIndex];\n    setVisitedStack(newStack);\n    if (!targetPage) {\n      setCurrentIndex(targetIndex);\n      return;\n    }\n    // Cancella risposte della pagina di destinazione prima di atterrare\n    setPageAnswers(prev => {\n      const updated = {\n        ...prev,\n        [targetPage.id]: {}\n      };\n      (async () => {\n        try {\n          await savePageAnswers(cluster, targetPage.id, {});\n          try {\n            const {\n              updated: cleaned\n            } = await cleanupUnreachablePages(cluster, pages, updated);\n            if (cleaned) setPageAnswers(cleaned);\n          } catch {}\n          window.dispatchEvent(new CustomEvent('progressChanged'));\n        } catch (e) {\n          console.error('Errore reset pagina on back', e);\n        }\n      })();\n      return updated;\n    });\n    setCurrentIndex(targetIndex);\n  };\n\n  // const handleRestart = async () => {\n  //   if (!cluster) return;\n  //   setResetting(true);\n  //   try {\n  //     await resetAllForCluster(cluster);\n  //     setPageAnswers({});\n  //     setCompleted(false);\n  //     setCurrentIndex(0);\n  //     window.dispatchEvent(new CustomEvent('progressChanged'));\n  //   } finally {\n  //     setResetting(false);\n  //   }\n  // };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Caricamento...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Errore: \", error, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 21\n  }, this);\n  if (!pages.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Nessuna pagina disponibile \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 61\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 29\n  }, this);\n  if (completed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completed-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        value: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Questionario completato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-row\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-back\",\n          onClick: () => navigate('/'),\n          children: [\"Torna all'elenco \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: 8,\n              display: 'inline-block'\n            },\n            children: \"\\u203A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this);\n  }\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-flow\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      value: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageView, {\n      page: page,\n      initialAnswers: initialAnswers,\n      onSubmit: handleSubmitPage,\n      loadingNext: saving\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-row\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: handleBack,\n        children: [\"Indietro \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 8,\n            display: 'inline-block'\n          },\n          children: \"\\u203A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePageFlow, \"eJ7RHIKXKhxlFk/sWNCofKr15/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuestionnairePageFlow;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePageFlow\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","useNavigate","ProgressBar","PageView","fetchPages","fetchPageAnswers","savePageAnswers","calculatePageProgress","cleanupUnreachablePages","resetAllForCluster","computeReachablePageIndices","jsxDEV","_jsxDEV","QuestionnairePageFlow","_s","cluster","navigate","pages","setPages","pageAnswers","setPageAnswers","currentIndex","setCurrentIndex","loading","setLoading","saving","setSaving","error","setError","completed","setCompleted","progress","setProgress","visitedStack","setVisitedStack","active","pagesResp","answersResp","Promise","all","e","message","recomputeCurrentIndex","length","flat","Object","values","reduce","acc","pa","entries","forEach","k","v","reachable","i","has","page","req","questions","filter","q","required","saved","id","done","every","undefined","lastReachable","idx","pct","allReachableComplete","prev","last","existingPos","indexOf","slice","window","scrollTo","top","behavior","setTimeout","heading","document","querySelector","setAttribute","focus","preventScroll","handleSubmitPage","answers","dispatchEvent","CustomEvent","updated","cleared","flatAfter","nextIdx","p","console","handleBack","newStack","targetIndex","targetPage","cleaned","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","value","style","marginLeft","display","initialAnswers","onSubmit","loadingNext","_c","$RefreshReg$"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport {\n  fetchPages,\n  fetchPageAnswers,\n  savePageAnswers,\n  calculatePageProgress,\n  cleanupUnreachablePages,\n  resetAllForCluster,\n  computeReachablePageIndices,\n} from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\n\nexport default function QuestionnairePageFlow() {\n  const { cluster } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  // const [resetting, setResetting] = useState(false);\n  const [visitedStack, setVisitedStack] = useState([]); // array di indici pagina in ordine di visita\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true); setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([\n          fetchPages(cluster),\n          fetchPageAnswers(cluster)\n        ]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => { active = false; };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    const flat = Object.values(pageAnswers || {}).reduce((acc, pa) => { Object.entries(pa || {}).forEach(([k,v]) => acc[k]=v); return acc; }, {});\n    const reachable = computeReachablePageIndices(pages, flat);\n    // Scorri solo le pagine raggiungibili in ordine di definizione\n    for (let i = 0; i < pages.length; i++) {\n      if (!reachable.has(i)) continue; // ignora non raggiungibili\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    // Se tutte le raggiungibili sono complete, tieni indice sull'ultima raggiungibile\n    let lastReachable = 0;\n    reachable.forEach(idx => { if (idx > lastReachable) lastReachable = idx; });\n    return lastReachable;\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Completamento solo sulle pagine raggiungibili\n    const flat = Object.values(pageAnswers || {}).reduce((acc, pa) => { Object.entries(pa || {}).forEach(([k,v]) => acc[k]=v); return acc; }, {});\n    const reachable = computeReachablePageIndices(pages, flat);\n    let allReachableComplete = true;\n    reachable.forEach(idx => {\n      const page = pages[idx];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) allReachableComplete = false;\n    });\n    setCompleted(allReachableComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n\n  // Mantieni lo stack coerente quando cambia currentIndex (push se nuovo)\n  useEffect(() => {\n    setVisitedStack(prev => {\n      if (!pages.length) return [];\n      if (currentIndex < 0 || currentIndex >= pages.length) return prev;\n      if (prev.length === 0) return [currentIndex];\n      const last = prev[prev.length - 1];\n      if (last === currentIndex) return prev; // niente duplicati consecutivi\n      // Se l'indice è già nello stack ma non è l'ultimo, lo tagliamo fino a quell'indice\n      const existingPos = prev.indexOf(currentIndex);\n      if (existingPos >= 0) return prev.slice(0, existingPos + 1);\n      return [...prev, currentIndex];\n    });\n  }, [currentIndex, pages]);\n\n  // Scroll & focus top quando cambia pagina corrente\n  useEffect(() => {\n    // Evita durante caricamenti iniziali\n    if (loading) return;\n    // Smooth scroll top\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    // Focus sul titolo se presente\n    setTimeout(() => {\n      const heading = document.querySelector('.page-view h2');\n      if (heading) {\n        heading.setAttribute('tabindex', '-1');\n        heading.focus({ preventScroll: true });\n      }\n    }, 50);\n  }, [currentIndex, loading]);\n\n  const handleSubmitPage = async (answers) => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({ ...prev, [page.id]: answers }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Cleanup pagine non più raggiungibili dopo questo salvataggio\n      try {\n        const { updated, cleared } = await cleanupUnreachablePages(cluster, pages, { ...pageAnswers, [page.id]: answers });\n        if (cleared.length) {\n          setPageAnswers(updated);\n          // Aggiorna progress immediatamente se necessario\n        }\n      } catch (e) {\n        // non bloccare il flusso se cleanup fallisce\n        // console.warn('Cleanup pagine non raggiungibili fallito', e);\n      }\n\n      // Nuova logica: dopo il salvataggio, determina l'indice della prossima pagina incompleta tra quelle raggiungibili.\n      const flatAfter = Object.values({ ...pageAnswers, [page.id]: answers }).reduce((acc, pa) => { Object.entries(pa || {}).forEach(([k,v]) => acc[k]=v); return acc; }, {});\n      const reachable = computeReachablePageIndices(pages, flatAfter);\n      // Trova prima raggiungibile non completa\n      let nextIdx = null;\n      pages.forEach((p, idx) => {\n        if (nextIdx !== null) return;\n        if (!reachable.has(idx)) return;\n        const req = (p.questions || []).filter(q => q.required);\n        const saved = (idx === currentIndex) ? answers : (pageAnswers[p.id] || {});\n        const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n        if (!done) nextIdx = idx;\n      });\n      if (nextIdx === null) {\n        setCompleted(true);\n      } else {\n        setCurrentIndex(nextIdx);\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (visitedStack.length <= 1) {\n      navigate('/');\n      return;\n    }\n    // Ritorna alla pagina precedente nello stack\n    const newStack = visitedStack.slice(0, -1);\n    const targetIndex = newStack[newStack.length - 1];\n    const targetPage = pages[targetIndex];\n    setVisitedStack(newStack);\n    if (!targetPage) {\n      setCurrentIndex(targetIndex);\n      return;\n    }\n    // Cancella risposte della pagina di destinazione prima di atterrare\n    setPageAnswers(prev => {\n      const updated = { ...prev, [targetPage.id]: {} };\n      (async () => {\n        try {\n          await savePageAnswers(cluster, targetPage.id, {});\n          try {\n            const { updated: cleaned } = await cleanupUnreachablePages(cluster, pages, updated);\n            if (cleaned) setPageAnswers(cleaned);\n          } catch {}\n          window.dispatchEvent(new CustomEvent('progressChanged'));\n        } catch (e) {\n          console.error('Errore reset pagina on back', e);\n        }\n      })();\n      return updated;\n    });\n    setCurrentIndex(targetIndex);\n  };\n\n  // const handleRestart = async () => {\n  //   if (!cluster) return;\n  //   setResetting(true);\n  //   try {\n  //     await resetAllForCluster(cluster);\n  //     setPageAnswers({});\n  //     setCompleted(false);\n  //     setCurrentIndex(0);\n  //     window.dispatchEvent(new CustomEvent('progressChanged'));\n  //   } finally {\n  //     setResetting(false);\n  //   }\n  // };\n\n  if (loading) return <div>Caricamento...</div>;\n  if (error) return <div>Errore: {error} <button onClick={() => navigate('/')}>Indietro</button></div>;\n  if (!pages.length) return <div>Nessuna pagina disponibile <button onClick={() => navigate('/')}>Indietro</button></div>;\n\n  if (completed) {\n    return (\n      <div className=\"completed-wrap\">\n        <ProgressBar value={100} />\n        <h2>Questionario completato</h2>\n        <div className=\"nav-row\">\n          <button className=\"btn-back\" onClick={() => navigate('/')}>\n            Torna all'elenco <span style={{marginLeft:8,display:'inline-block'}}>&#8250;</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n\n  return (\n    <div className=\"page-flow\">\n      <ProgressBar value={progress} />\n      <PageView\n        page={page}\n        initialAnswers={initialAnswers}\n        onSubmit={handleSubmitPage}\n        loadingNext={saving}\n      />\n      <div className=\"nav-row\">\n        <button className=\"btn-back\" onClick={handleBack}>\n          Indietro <span style={{marginLeft:8,display:'inline-block'}}>&#8250;</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
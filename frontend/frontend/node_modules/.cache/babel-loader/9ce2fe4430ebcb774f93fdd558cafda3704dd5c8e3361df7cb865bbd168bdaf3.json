{"ast":null,"code":"var _jsxFileName = \"/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport { fetchPages, fetchPageAnswers, savePageAnswers, calculatePageProgress, evaluateCondition, cleanupUnreachablePages, resetAllForCluster } from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionnairePageFlow() {\n  _s();\n  const {\n    cluster\n  } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [resetting, setResetting] = useState(false);\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([fetchPages(cluster), fetchPageAnswers(cluster)]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    return Math.max(0, pages.length - 1);\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Determina completamento globale\n    const allComplete = pages.every(p => {\n      const req = (p.questions || []).filter(q => q.required);\n      const saved = pageAnswers[p.id] || {};\n      return req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n    });\n    setCompleted(allComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n  const handleSubmitPage = async answers => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({\n        ...prev,\n        [page.id]: answers\n      }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Cleanup pagine non piÃ¹ raggiungibili dopo questo salvataggio\n      try {\n        const {\n          updated,\n          cleared\n        } = await cleanupUnreachablePages(cluster, pages, {\n          ...pageAnswers,\n          [page.id]: answers\n        });\n        if (cleared.length) {\n          setPageAnswers(updated);\n          // Aggiorna progress immediatamente se necessario\n        }\n      } catch (e) {\n        // non bloccare il flusso se cleanup fallisce\n        // console.warn('Cleanup pagine non raggiungibili fallito', e);\n      }\n\n      // Routing condizionale data-driven\n      const routing = page.conditionalRouting;\n      if (routing) {\n        // Flatten risposte correnti per condizione: tutte pageAnswers + questa pagina\n        const flat = {\n          ...Object.values({\n            ...pageAnswers,\n            [page.id]: answers\n          }).reduce((acc, pa) => {\n            Object.entries(pa || {}).forEach(([k, v]) => acc[k] = v);\n            return acc;\n          }, {})\n        };\n        // Ordina regole per priority\n        const ordered = [...(routing.rules || [])].sort((a, b) => {\n          var _a$priority, _b$priority;\n          return ((_a$priority = a.priority) !== null && _a$priority !== void 0 ? _a$priority : 0) - ((_b$priority = b.priority) !== null && _b$priority !== void 0 ? _b$priority : 0);\n        });\n        const matched = ordered.find(r => evaluateCondition(r.condition, flat));\n        let targetId = null;\n        if (matched) targetId = matched.nextPage;else if (routing.defaultAction === 'complete') targetId = null;else targetId = routing.defaultAction;\n        if (!targetId) {\n          setCompleted(true);\n        } else {\n          const idx = pages.findIndex(p => p.id === targetId);\n          if (idx >= 0) setCurrentIndex(idx);else setCompleted(true);\n        }\n      } else {\n        // fallback sequenziale o flag isLast\n        if (page.isLast || page.nextPage === null) {\n          setCompleted(true);\n        } else if (page.nextPage) {\n          const idx = pages.findIndex(p => p.id === page.nextPage);\n          if (idx >= 0) setCurrentIndex(idx);else setCompleted(true);\n        } else {\n          setCurrentIndex(i => Math.min(i + 1, pages.length - 1));\n        }\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleBack = () => {\n    if (currentIndex === 0) {\n      navigate('/');\n      return;\n    }\n    setCurrentIndex(i => Math.max(0, i - 1));\n  };\n  const handleRestart = async () => {\n    if (!cluster) return;\n    setResetting(true);\n    try {\n      await resetAllForCluster(cluster);\n      setPageAnswers({});\n      setCompleted(false);\n      setCurrentIndex(0);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n    } finally {\n      setResetting(false);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Caricamento...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Errore: \", error, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 21\n  }, this);\n  if (!pages.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Nessuna pagina disponibile \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      children: \"Indietro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 61\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 29\n  }, this);\n  if (completed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completed-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        value: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Questionario completato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-back\",\n          onClick: () => navigate('/'),\n          children: \"Torna all'elenco\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-back\",\n          disabled: resetting,\n          onClick: handleRestart,\n          children: resetting ? 'Reset...' : 'Ricomincia'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-flow\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      value: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageView, {\n      page: page,\n      initialAnswers: initialAnswers,\n      onSubmit: handleSubmitPage,\n      loadingNext: saving\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        onClick: handleBack,\n        children: \"\\u2190 Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-back\",\n        disabled: resetting,\n        onClick: handleRestart,\n        children: resetting ? 'Reset...' : 'Ricomincia'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePageFlow, \"8rhtwc8nQ5m8triYyCqSJFLvMEU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuestionnairePageFlow;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePageFlow\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","useNavigate","ProgressBar","PageView","fetchPages","fetchPageAnswers","savePageAnswers","calculatePageProgress","evaluateCondition","cleanupUnreachablePages","resetAllForCluster","jsxDEV","_jsxDEV","QuestionnairePageFlow","_s","cluster","navigate","pages","setPages","pageAnswers","setPageAnswers","currentIndex","setCurrentIndex","loading","setLoading","saving","setSaving","error","setError","completed","setCompleted","progress","setProgress","resetting","setResetting","active","pagesResp","answersResp","Promise","all","e","message","recomputeCurrentIndex","length","i","page","req","questions","filter","q","required","saved","id","done","every","undefined","Math","max","pct","allComplete","p","handleSubmitPage","answers","prev","window","dispatchEvent","CustomEvent","updated","cleared","routing","conditionalRouting","flat","Object","values","reduce","acc","pa","entries","forEach","k","v","ordered","rules","sort","a","b","_a$priority","_b$priority","priority","matched","find","r","condition","targetId","nextPage","defaultAction","idx","findIndex","isLast","min","console","handleBack","handleRestart","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","value","disabled","initialAnswers","onSubmit","loadingNext","_c","$RefreshReg$"],"sources":["/Users/mucenid/questionnaire_poc/frontend/frontend/src/components/QuestionnairePageFlow.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ProgressBar from './ProgressBar';\nimport PageView from './PageView';\nimport {\n  fetchPages,\n  fetchPageAnswers,\n  savePageAnswers,\n  calculatePageProgress,\n  evaluateCondition,\n  cleanupUnreachablePages,\n  resetAllForCluster,\n} from '../api';\n\n// Flusso a pagine data-driven (analogo a QuestionnairePageFlowViewModel Swift)\n\nexport default function QuestionnairePageFlow() {\n  const { cluster } = useParams();\n  const navigate = useNavigate();\n  const [pages, setPages] = useState([]);\n  const [pageAnswers, setPageAnswers] = useState({}); // { pageId: { qid: value } }\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [completed, setCompleted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [resetting, setResetting] = useState(false);\n\n  // Carica pagine + risposte\n  useEffect(() => {\n    if (!cluster) return;\n    let active = true;\n    (async () => {\n      setLoading(true); setError(null);\n      try {\n        const [pagesResp, answersResp] = await Promise.all([\n          fetchPages(cluster),\n          fetchPageAnswers(cluster)\n        ]);\n        if (!active) return;\n        setPages(pagesResp.pages || []);\n        setPageAnswers(answersResp.pageAnswers || {});\n      } catch (e) {\n        setError(e.message || 'Errore caricamento');\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => { active = false; };\n  }, [cluster]);\n\n  // Calcola indice della prima pagina incompleta\n  const recomputeCurrentIndex = useCallback(() => {\n    if (!pages.length) return 0;\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n      const req = (page.questions || []).filter(q => q.required);\n      const saved = pageAnswers[page.id] || {};\n      const done = req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n      if (!done) return i;\n    }\n    return Math.max(0, pages.length - 1);\n  }, [pages, pageAnswers]);\n\n  // Recalcola progresso\n  useEffect(() => {\n    const pct = calculatePageProgress(pages, pageAnswers);\n    setProgress(pct);\n    // Determina completamento globale\n    const allComplete = pages.every(p => {\n      const req = (p.questions || []).filter(q => q.required);\n      const saved = pageAnswers[p.id] || {};\n      return req.every(q => saved[q.id] !== undefined && saved[q.id] !== null && saved[q.id] !== '');\n    });\n    setCompleted(allComplete && pct === 100);\n  }, [pages, pageAnswers]);\n\n  // Aggiorna indice pagina attuale quando cambiano dati\n  useEffect(() => {\n    setCurrentIndex(recomputeCurrentIndex());\n  }, [recomputeCurrentIndex]);\n\n  const handleSubmitPage = async (answers) => {\n    const page = pages[currentIndex];\n    if (!page) return;\n    setSaving(true);\n    try {\n      // Salva localmente\n      setPageAnswers(prev => ({ ...prev, [page.id]: answers }));\n      await savePageAnswers(cluster, page.id, answers);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n      // Cleanup pagine non piÃ¹ raggiungibili dopo questo salvataggio\n      try {\n        const { updated, cleared } = await cleanupUnreachablePages(cluster, pages, { ...pageAnswers, [page.id]: answers });\n        if (cleared.length) {\n          setPageAnswers(updated);\n          // Aggiorna progress immediatamente se necessario\n        }\n      } catch (e) {\n        // non bloccare il flusso se cleanup fallisce\n        // console.warn('Cleanup pagine non raggiungibili fallito', e);\n      }\n\n      // Routing condizionale data-driven\n      const routing = page.conditionalRouting;\n      if (routing) {\n        // Flatten risposte correnti per condizione: tutte pageAnswers + questa pagina\n        const flat = { ...Object.values({ ...pageAnswers, [page.id]: answers }).reduce((acc, pa) => { Object.entries(pa || {}).forEach(([k,v]) => acc[k]=v); return acc; }, {}) };\n        // Ordina regole per priority\n        const ordered = [...(routing.rules || [])].sort((a,b) => (a.priority ?? 0) - (b.priority ?? 0));\n        const matched = ordered.find(r => evaluateCondition(r.condition, flat));\n        let targetId = null;\n        if (matched) targetId = matched.nextPage; else if (routing.defaultAction === 'complete') targetId = null; else targetId = routing.defaultAction;\n        if (!targetId) {\n          setCompleted(true);\n        } else {\n          const idx = pages.findIndex(p => p.id === targetId);\n            if (idx >= 0) setCurrentIndex(idx); else setCompleted(true);\n        }\n      } else {\n        // fallback sequenziale o flag isLast\n        if (page.isLast || page.nextPage === null) {\n          setCompleted(true);\n        } else if (page.nextPage) {\n          const idx = pages.findIndex(p => p.id === page.nextPage);\n          if (idx >= 0) setCurrentIndex(idx); else setCompleted(true);\n        } else {\n          setCurrentIndex(i => Math.min(i + 1, pages.length - 1));\n        }\n      }\n    } catch (e) {\n      console.error('Errore salvataggio pagina', e);\n      setError(e.message || 'Errore salvataggio');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentIndex === 0) {\n      navigate('/');\n      return;\n    }\n    setCurrentIndex(i => Math.max(0, i - 1));\n  };\n\n  const handleRestart = async () => {\n    if (!cluster) return;\n    setResetting(true);\n    try {\n      await resetAllForCluster(cluster);\n      setPageAnswers({});\n      setCompleted(false);\n      setCurrentIndex(0);\n      window.dispatchEvent(new CustomEvent('progressChanged'));\n    } finally {\n      setResetting(false);\n    }\n  };\n\n  if (loading) return <div>Caricamento...</div>;\n  if (error) return <div>Errore: {error} <button onClick={() => navigate('/')}>Indietro</button></div>;\n  if (!pages.length) return <div>Nessuna pagina disponibile <button onClick={() => navigate('/')}>Indietro</button></div>;\n\n  if (completed) {\n    return (\n      <div className=\"completed-wrap\">\n        <ProgressBar value={100} />\n        <h2>Questionario completato</h2>\n        <div className=\"nav-row\">\n          <button className=\"btn-back\" onClick={() => navigate('/')}>Torna all'elenco</button>\n          <button className=\"btn-back\" disabled={resetting} onClick={handleRestart}>{resetting ? 'Reset...' : 'Ricomincia'}</button>\n        </div>\n      </div>\n    );\n  }\n\n  const page = pages[currentIndex];\n  const initialAnswers = pageAnswers[page.id] || {};\n\n  return (\n    <div className=\"page-flow\">\n      <ProgressBar value={progress} />\n      <PageView\n        page={page}\n        initialAnswers={initialAnswers}\n        onSubmit={handleSubmitPage}\n        loadingNext={saving}\n      />\n      <div className=\"nav-row\">\n        <button className=\"btn-back\" onClick={handleBack}>â Indietro</button>\n        <button className=\"btn-back\" disabled={resetting} onClick={handleRestart}>{resetting ? 'Reset...' : 'Ricomincia'}</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}